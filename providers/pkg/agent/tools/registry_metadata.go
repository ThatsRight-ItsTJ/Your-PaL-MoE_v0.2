// ABOUTME: Generated metadata definitions for all registered tools in the system.
// ABOUTME: This file is auto-generated by toolgen and contains tool schemas and descriptions.
// Code generated by toolgen. DO NOT EDIT.

package tools

import (
	"encoding/json"
	"fmt"

	"github.com/lexlapax/go-llms/pkg/agent/domain"
)

// ToolManifest provides static tool metadata without requiring imports
var ToolManifest = map[string]ToolInfo{
	"api_client": {
		Name:            "api_client",
		Description:     "Make REST API and GraphQL calls with automatic error handling and authentication support",
		Category:        "web",
		Tags:            []string{"api", "rest", "http", "graphql", "integration", "client"},
		Version:         "4.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/web",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "Use this tool to interact with REST APIs and GraphQL endpoints. It handles:\n- Multiple authentication methods (API key, Bearer token, Basic auth, OAuth2, Custom headers)\n- Automatic JSON encoding/decoding\n- Path parameter substitution\n- Helpful error messages and guidance\n- Common HTTP methods (GET, POST, PUT, DELETE, etc.)\n- OpenAPI/Swagger spec discovery and validation\n- GraphQL queries, mutations, and introspection\n\nThe tool will automatically set appropriate headers and handle responses intelligently.\n\nAuthentication Options:\n- API Key: Set key location (header/query/cookie) and key name\n- Bearer: Standard Authorization: Bearer token\n- Basic: Username/password authentication\n- OAuth2: Use access token from OAuth2 flow\n- Custom: Set any custom header with optional prefix\n\nSession Management:\n- Enable enable_session=true to maintain cookies across requests\n- Sessions are preserved in agent state for reuse\n\nREST API Modes:\n- Regular Mode: Standard REST API calls with path/query parameters\n- OpenAPI Discovery: Set discover_operations=true to explore available endpoints\n- OpenAPI Validation: Provide openapi_spec URL to validate requests\n\nGraphQL Modes:\n- Query/Mutation Mode: Provide graphql_query to execute GraphQL operations\n- Discovery Mode: Set discover_graphql=true to introspect schema\n- Variables are passed via graphql_variables parameter\n- Automatically handles GraphQL-specific error formatting",
		Examples: []Example{
			{
				Name:        "Simple GET request",
				Description: "Fetch user data from an API",
				Input:       json.RawMessage(`{"base_url":"https://api.github.com","endpoint":"/users/octocat","method":"GET"}`),
				Output:      json.RawMessage(`{"data":{"login":"octocat","name":"The Octocat"},"status_code":200,"success":true}`),
			},
			{
				Name:        "POST with authentication",
				Description: "Create a resource with API key authentication",
				Input:       json.RawMessage(`{"auth":{"api_key":"your-api-key","key_location":"header","key_name":"X-API-Key","type":"api_key"},"base_url":"https://api.example.com","body":{"description":"Created via API","name":"New Item"},"endpoint":"/items","method":"POST"}`),
				Output:      json.RawMessage(`{"data":{"created":true,"id":"12345"},"status_code":201,"success":true}`),
			},
			{
				Name:        "Path parameters",
				Description: "Use path parameters in the endpoint",
				Input:       json.RawMessage(`{"base_url":"https://api.example.com","endpoint":"/users/{user_id}/posts/{post_id}","method":"GET","path_params":{"post_id":"42","user_id":"alice"}}`),
				Output:      json.RawMessage(`{"data":{"content":"Post content here","title":"My Post"},"status_code":200,"success":true}`),
			},
			{
				Name:        "OpenAPI discovery",
				Description: "Discover available operations from OpenAPI spec",
				Input:       json.RawMessage(`{"base_url":"https://api.example.com","discover_operations":true,"endpoint":"/not-used-in-discovery","openapi_spec":"https://api.example.com/openapi.json"}`),
				Output:      json.RawMessage(`{"operations":[{"method":"GET","operationId":"listUsers","path":"/users","summary":"List users"},{"method":"GET","operationId":"getUser","path":"/users/{id}","summary":"Get user by ID"}],"spec_info":{"title":"Example API","version":"1.0.0"},"success":true,"total_operations":2}`),
			},
			{
				Name:        "GraphQL query",
				Description: "Execute a GraphQL query",
				Input:       json.RawMessage(`{"auth":{"token":"github_token_here","type":"bearer"},"base_url":"https://api.github.com","endpoint":"/graphql","graphql_query":"query {\n  viewer {\n    login\n    name\n    email\n  }\n}"}`),
				Output:      json.RawMessage(`{"data":{"viewer":{"email":"octocat@github.com","login":"octocat","name":"The Octocat"}},"status_code":200,"success":true}`),
			},
			{
				Name:        "GraphQL with variables",
				Description: "Execute a GraphQL query with variables",
				Input:       json.RawMessage(`{"auth":{"token":"github_token_here","type":"bearer"},"base_url":"https://api.github.com","endpoint":"/graphql","graphql_query":"query GetRepo($owner: String!, $name: String!) {\n  repository(owner: $owner, name: $name) {\n    name\n    description\n    stargazerCount\n  }\n}","graphql_variables":{"name":"go","owner":"golang"}}`),
				Output:      json.RawMessage(`{"data":{"repository":{"description":"The Go programming language","name":"go","stargazerCount":120000}},"status_code":200,"success":true}`),
			},
			{
				Name:        "GraphQL discovery",
				Description: "Discover GraphQL schema",
				Input:       json.RawMessage(`{"auth":{"token":"github_token_here","type":"bearer"},"base_url":"https://api.github.com","discover_graphql":true,"endpoint":"/graphql"}`),
				Output:      json.RawMessage(`{"graphql_schema":{"endpoint":"https://api.github.com/graphql","operations":{"queries":[{"description":"The currently authenticated user","example":"query { viewer { login name email } }","name":"viewer","returns":"User"},{"arguments":[{"name":"owner","required":true,"type":"String!"},{"name":"name","required":true,"type":"String!"}],"description":"Lookup a repository","example":"query { repository(owner: \"owner\", name: \"repo\") { name } }","name":"repository","returns":"Repository"}]}},"status_code":200,"success":true}`),
			},
		},
	},
	"calculator": {
		Name:            "calculator",
		Description:     "Performs mathematical calculations including arithmetic, trigonometry, and logarithms",
		Category:        "math",
		Tags:            []string{"math", "calculation", "arithmetic", "trigonometry"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/math",
		ParameterSchema: json.RawMessage(`{"properties":{"operand1":{"description":"First operand (or single operand for unary operations)","type":"number"},"operand2":{"description":"Second operand (optional for unary operations)","type":"number"},"operation":{"description":"The mathematical operation to perform","type":"string"}},"required":["operation"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "Use this tool to perform mathematical calculations. It supports:\n\nBasic Arithmetic:\n- add (+): Addition of two numbers\n- subtract (-): Subtraction (operand1 - operand2)\n- multiply (*): Multiplication\n- divide (/): Division (checks for division by zero)\n- mod (%): Modulo operation\n- power (^, **): Exponentiation\n- abs: Absolute value\n\nRoots and Logarithms:\n- sqrt: Square root (requires non-negative operand)\n- cbrt: Cube root\n- log: Natural logarithm (base e) or logarithm with custom base\n- log10: Base-10 logarithm\n- log2: Base-2 logarithm\n- exp: e raised to the power of operand1\n\nTrigonometry (angles in radians):\n- sin, cos, tan: Standard trigonometric functions\n- asin, acos, atan: Inverse trigonometric functions\n- sinh, cosh, tanh: Hyperbolic functions\n\nRounding:\n- floor: Round down to nearest integer\n- ceil: Round up to nearest integer\n- round: Round to nearest integer\n\nAdvanced:\n- factorial: Calculate n! (requires non-negative integer ≤ 170)\n- gcd: Greatest common divisor (requires positive integers)\n- lcm: Least common multiple (requires positive integers)\n\nMathematical Constants (no operands needed):\n- pi (π): 3.14159...\n- e: Euler's number (2.71828...)\n- phi (φ): Golden ratio\n- tau (τ): 2π\n- sqrt2, sqrte, sqrtpi, sqrtphi: Square roots of constants\n- ln2, ln10, log2e, log10e: Logarithmic constants\n\nSpecial operand values:\n- You can use constant names as operands, e.g., operand1: \"pi\"\n- Numbers can be provided as strings and will be parsed",
		Examples: []Example{
			{
				Name:        "Basic addition",
				Description: "Add two decimal numbers",
				Input:       json.RawMessage(`{"operand1":10.5,"operand2":5.2,"operation":"add"}`),
				Output:      json.RawMessage(`{"operand1":10.5,"operand2":5.2,"operation":"add","result":15.7,"success":true}`),
			},
			{
				Name:        "Square root",
				Description: "Calculate the square root of a number",
				Input:       json.RawMessage(`{"operand1":16,"operation":"sqrt"}`),
				Output:      json.RawMessage(`{"operand1":16,"operation":"sqrt","result":4,"success":true}`),
			},
			{
				Name:        "Trigonometry with constants",
				Description: "Calculate sine of π/2",
				Input:       json.RawMessage(`{"operand1":"pi","operand2":2,"operation":"sin"}`),
				Output:      json.RawMessage(`{"operand1":1.5707963267948966,"operation":"sin","result":1,"success":true}`),
			},
			{
				Name:        "Get mathematical constant",
				Description: "Retrieve the value of π",
				Input:       json.RawMessage(`{"operation":"pi"}`),
				Output:      json.RawMessage(`{"operation":"pi","result":3.141592653589793,"success":true}`),
			},
			{
				Name:        "Division by zero error",
				Description: "Handle division by zero gracefully",
				Input:       json.RawMessage(`{"operand1":10,"operand2":0,"operation":"divide"}`),
				Output:      json.RawMessage(`{"error":"division by zero","operand1":10,"operand2":0,"operation":"divide","success":false}`),
			},
			{
				Name:        "Factorial calculation",
				Description: "Calculate 5!",
				Input:       json.RawMessage(`{"operand1":5,"operation":"factorial"}`),
				Output:      json.RawMessage(`{"operand1":5,"operation":"factorial","result":120,"success":true}`),
			},
			{
				Name:        "Logarithm with custom base",
				Description: "Calculate log base 2 of 8",
				Input:       json.RawMessage(`{"operand1":8,"operand2":2,"operation":"log"}`),
				Output:      json.RawMessage(`{"operand1":8,"operand2":2,"operation":"log","result":3,"success":true}`),
			},
		},
	},
	"csv_process": {
		Name:            "csv_process",
		Description:     "Process CSV data: parse, filter, transform, or convert to JSON",
		Category:        "data",
		Tags:            []string{"data", "csv", "parse", "filter", "transform", "tabular"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/data",
		ParameterSchema: json.RawMessage(`{"properties":{"data":{"description":"The CSV data to process","type":"string"},"delimiter":{"description":"Column delimiter character","type":"string"},"filter_condition":{"description":"Filter condition in format column:operator:value","type":"string"},"has_headers":{"description":"Whether the first row contains headers","type":"boolean"},"operation":{"description":"Operation to perform: parse, filter, transform, or to_json","enum":["parse","filter","transform","to_json"],"type":"string"},"params":{"description":"Additional parameters for transformations","type":"object"},"transform":{"description":"Transform type: select_columns, sort, count_rows, or statistics","enum":["select_columns","sort","count_rows","statistics"],"type":"string"}},"required":["data","operation"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "Use this tool to process CSV (Comma-Separated Values) data in various ways:\n\nParse Operation:\n- Validates and parses CSV data into a structured format\n- Detects headers if has_headers is true\n- Returns array of arrays representing rows and columns\n- Supports custom delimiters (comma by default)\n\nFilter Operation:\n- Filter rows based on conditions using column:operator:value format\n- Supported operators:\n  - eq, =, ==: Equal to\n  - ne, !=, <>: Not equal to\n  - contains: Contains substring\n  - starts_with: Starts with string\n  - ends_with: Ends with string\n  - gt, >: Greater than (numeric comparison)\n  - lt, <: Less than (numeric comparison)\n  - gte, >=: Greater than or equal to\n  - lte, <=: Less than or equal to\n- Column can be header name (if has_headers) or index (0-based)\n\nTransform Operations:\n- select_columns: Select specific columns by name or index\n  - Requires params.columns as array or comma-separated string\n- sort: Sort records (basic implementation)\n- count_rows: Count number of data rows (excluding headers)\n- statistics: Calculate statistics for numeric columns\n  - Optional params.columns to specify which columns to analyze\n  - Returns count, sum, min, max, avg, variance, std_dev\n\nConvert to JSON:\n- to_json: Convert CSV to JSON format\n  - With headers: Returns array of objects with column names as keys\n  - Without headers: Returns array of arrays\n\nDelimiter Support:\n- Default is comma (,)\n- Can specify any single character delimiter (tab, pipe, semicolon, etc.)\n- Common delimiters: \",\" (comma), \"\\t\" (tab), \"|\" (pipe), \";\" (semicolon)\n\nState Integration:\n- csv_default_delimiter: Default delimiter from agent state\n- csv_max_rows: Maximum rows to process (for performance limits)",
		Examples: []Example{
			{
				Name:        "Parse CSV with headers",
				Description: "Parse a simple CSV file with column headers",
				Input:       json.RawMessage(`{"data":"name,age,city\nJohn,30,New York\nJane,25,Boston\nBob,35,Chicago","has_headers":true,"operation":"parse"}`),
				Output:      json.RawMessage(`{"columns":["name","age","city"],"result":[["name","age","city"],["John","30","New York"],["Jane","25","Boston"],["Bob","35","Chicago"]],"row_count":3}`),
			},
			{
				Name:        "Filter by numeric condition",
				Description: "Filter rows where age is greater than 25",
				Input:       json.RawMessage(`{"data":"name,age,city\nJohn,30,New York\nJane,25,Boston\nBob,35,Chicago","filter_condition":"age:gt:25","has_headers":true,"operation":"filter"}`),
				Output:      json.RawMessage(`{"columns":["name","age","city"],"result":[["name","age","city"],["John","30","New York"],["Bob","35","Chicago"]],"row_count":2}`),
			},
			{
				Name:        "Select specific columns",
				Description: "Extract only name and city columns",
				Input:       json.RawMessage(`{"data":"name,age,city,country\nJohn,30,New York,USA\nJane,25,Boston,USA","has_headers":true,"operation":"transform","params":{"columns":["name","city"]},"transform":"select_columns"}`),
				Output:      json.RawMessage(`{"columns":["name","city"],"result":[["name","city"],["John","New York"],["Jane","Boston"]],"row_count":2}`),
			},
			{
				Name:        "Convert to JSON with headers",
				Description: "Transform CSV into JSON array of objects",
				Input:       json.RawMessage(`{"data":"id,name,score\n1,Alice,95\n2,Bob,87","has_headers":true,"operation":"to_json"}`),
				Output:      json.RawMessage(`{"columns":["id","name","score"],"result":"[\n  {\n    \"id\": \"1\",\n    \"name\": \"Alice\",\n    \"score\": \"95\"\n  },\n  {\n    \"id\": \"2\",\n    \"name\": \"Bob\",\n    \"score\": \"87\"\n  }\n]","row_count":2}`),
			},
			{
				Name:        "Calculate statistics",
				Description: "Get statistics for numeric columns",
				Input:       json.RawMessage(`{"data":"product,price,quantity\nA,10.5,100\nB,20.0,150\nC,15.75,200","has_headers":true,"operation":"transform","params":{"columns":["price","quantity"]},"transform":"statistics"}`),
				Output:      json.RawMessage(`{"result":{"column_count":3,"price":{"avg":15.416666666666666,"count":3,"max":20,"min":10.5,"std_dev":19.326388888888886,"sum":46.25,"variance":19.326388888888886},"quantity":{"avg":150,"count":3,"max":200,"min":100,"std_dev":2500,"sum":450,"variance":2500},"row_count":3},"row_count":3}`),
			},
			{
				Name:        "Parse with custom delimiter",
				Description: "Parse tab-separated values",
				Input:       json.RawMessage(`{"data":"name\tage\tcity\nJohn\t30\tNew York\nJane\t25\tBoston","delimiter":"\t","has_headers":true,"operation":"parse"}`),
				Output:      json.RawMessage(`{"columns":["name","age","city"],"result":[["name","age","city"],["John","30","New York"],["Jane","25","Boston"]],"row_count":2}`),
			},
			{
				Name:        "Filter with string contains",
				Description: "Find all rows where city contains 'New'",
				Input:       json.RawMessage(`{"data":"name,city\nJohn,New York\nJane,Boston\nBob,New Orleans","filter_condition":"city:contains:New","has_headers":true,"operation":"filter"}`),
				Output:      json.RawMessage(`{"columns":["name","city"],"result":[["name","city"],["John","New York"],["Bob","New Orleans"]],"row_count":2}`),
			},
		},
	},
	"data_transform": {
		Name:            "data_transform",
		Description:     "Transform data: filter, map, reduce, sort, group_by, unique, or reverse",
		Category:        "data",
		Tags:            []string{"data", "transform", "filter", "map", "reduce", "sort", "group"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/data",
		ParameterSchema: json.RawMessage(`{"properties":{"condition":{"description":"Condition for filter operation in format: operator:value","type":"string"},"data":{"description":"The data to transform as JSON string or array","type":"string"},"field":{"description":"Field name or path for the operation","type":"string"},"map_type":{"description":"Type of mapping: extract_field, to_upper, to_lower, to_number, or to_string","enum":["extract_field","to_upper","to_lower","to_number","to_string"],"type":"string"},"operation":{"description":"Operation to perform: filter, map, reduce, sort, group_by, unique, or reverse","enum":["filter","map","reduce","sort","group_by","unique","reverse"],"type":"string"},"reduce_type":{"description":"Type of reduction: sum, count, min, max, average, or concat","enum":["sum","count","min","max","average","concat"],"type":"string"},"sort_order":{"description":"Sort order: asc or desc","enum":["asc","desc"],"type":"string"}},"required":["data","operation"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "Use this tool to perform common data transformation operations on JSON arrays:\n\nFilter Operation:\n- Extract items matching specific conditions\n- Condition format: \"operator:value\"\n- Supported operators:\n  - eq, =, ==: Equal to\n  - ne, !=, <>: Not equal to\n  - gt, >: Greater than\n  - gte, >=: Greater than or equal to\n  - lt, <: Less than\n  - lte, <=: Less than or equal to\n  - contains: Contains substring\n  - starts_with: Starts with string\n  - ends_with: Ends with string\n  - exists: Field exists (value should be \"true\" or \"false\")\n- Field can be nested using dots: \"address.city\"\n\nMap Operation:\n- Transform each item in the array\n- Map types:\n  - extract_field: Extract specific field from objects\n  - to_upper: Convert to uppercase\n  - to_lower: Convert to lowercase\n  - to_number: Convert to numeric value\n  - to_string: Convert to string representation\n\nReduce Operation:\n- Aggregate array to a single value\n- Reduce types:\n  - sum: Sum numeric values\n  - count: Count items\n  - min: Find minimum value\n  - max: Find maximum value\n  - average: Calculate average of numeric values\n  - concat: Concatenate as comma-separated string\n\nSort Operation:\n- Sort array by value or field\n- Order: \"asc\" (ascending) or \"desc\" (descending)\n- Supports numeric and string sorting\n\nGroup By Operation:\n- Group items by field value\n- Returns object with field values as keys\n- Each key contains array of matching items\n\nUnique Operation:\n- Remove duplicate items\n- Can use field for uniqueness check\n- Preserves first occurrence\n\nReverse Operation:\n- Reverse the order of array items\n- Simple operation, no parameters needed\n\nOperation Chaining:\n- For complex transformations, consider chaining multiple operations\n- Example: filter → map → sort → unique\n\nState Integration:\n- data_transform_default_sort_order: Default sort order from agent state",
		Examples: []Example{
			{
				Name:        "Filter by numeric condition",
				Description: "Filter users older than 25",
				Input:       json.RawMessage(`{"condition":"gt:25","data":"[{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":22},{\"name\":\"Carol\",\"age\":28}]","field":"age","operation":"filter"}`),
				Output:      json.RawMessage(`{"item_count":2,"result":[{"age":null,"name":"Alice"},{"age":null,"name":"Carol"}],"result_type":"[]interface {}"}`),
			},
			{
				Name:        "Map to extract field",
				Description: "Extract names from user objects",
				Input:       json.RawMessage(`{"data":"[{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":22}]","field":"name","map_type":"extract_field","operation":"map"}`),
				Output:      json.RawMessage(`{"item_count":2,"result":["Alice","Bob"],"result_type":"[]interface {}"}`),
			},
			{
				Name:        "Reduce to sum prices",
				Description: "Calculate total price from product list",
				Input:       json.RawMessage(`{"data":"[{\"product\":\"A\",\"price\":10.5},{\"product\":\"B\",\"price\":20},{\"product\":\"C\",\"price\":15.5}]","field":"price","operation":"reduce","reduce_type":"sum"}`),
				Output:      json.RawMessage(`{"item_count":1,"result":null,"result_type":"float64"}`),
			},
			{
				Name:        "Sort by field descending",
				Description: "Sort products by price from high to low",
				Input:       json.RawMessage(`{"data":"[{\"name\":\"A\",\"price\":30},{\"name\":\"B\",\"price\":10},{\"name\":\"C\",\"price\":20}]","field":"price","operation":"sort","sort_order":"desc"}`),
				Output:      json.RawMessage(`{"item_count":3,"result":[{"name":"A","price":null},{"name":"C","price":null},{"name":"B","price":null}],"result_type":"[]interface {}"}`),
			},
			{
				Name:        "Group by category",
				Description: "Group products by their category",
				Input:       json.RawMessage(`{"data":"[{\"name\":\"Apple\",\"category\":\"fruit\"},{\"name\":\"Carrot\",\"category\":\"vegetable\"},{\"name\":\"Banana\",\"category\":\"fruit\"}]","field":"category","operation":"group_by"}`),
				Output:      json.RawMessage(`{"item_count":2,"result":{"fruit":[{"category":"fruit","name":"Apple"},{"category":"fruit","name":"Banana"}],"vegetable":[{"category":"vegetable","name":"Carrot"}]},"result_type":"map[string]interface {}"}`),
			},
			{
				Name:        "Get unique values",
				Description: "Remove duplicate tags",
				Input:       json.RawMessage(`{"data":"[\"python\",\"javascript\",\"python\",\"go\",\"javascript\",\"rust\"]","operation":"unique"}`),
				Output:      json.RawMessage(`{"item_count":4,"result":["python","javascript","go","rust"],"result_type":"[]interface {}"}`),
			},
			{
				Name:        "Transform strings to uppercase",
				Description: "Convert all strings to uppercase",
				Input:       json.RawMessage(`{"data":"[\"hello\",\"world\",\"data\",\"transform\"]","map_type":"to_upper","operation":"map"}`),
				Output:      json.RawMessage(`{"item_count":4,"result":["HELLO","WORLD","DATA","TRANSFORM"],"result_type":"[]interface {}"}`),
			},
			{
				Name:        "Filter with nested field",
				Description: "Filter by nested object property",
				Input:       json.RawMessage(`{"condition":"eq:NYC","data":"[{\"user\":\"A\",\"profile\":{\"city\":\"NYC\"}},{\"user\":\"B\",\"profile\":{\"city\":\"LA\"}}]","field":"profile.city","operation":"filter"}`),
				Output:      json.RawMessage(`{"item_count":1,"result":[{"profile":{"city":"NYC"},"user":"A"}],"result_type":"[]interface {}"}`),
			},
			{
				Name:        "Calculate average",
				Description: "Find average score",
				Input:       json.RawMessage(`{"data":"[{\"name\":\"Test1\",\"score\":85},{\"name\":\"Test2\",\"score\":90},{\"name\":\"Test3\",\"score\":78}]","field":"score","operation":"reduce","reduce_type":"average"}`),
				Output:      json.RawMessage(`{"item_count":1,"result":null,"result_type":"float64"}`),
			},
			{
				Name:        "Operation chain example",
				Description: "First filter, then map (requires two operations)",
				Input:       json.RawMessage(`{"condition":"eq:true","data":"[{\"name\":\"Alice\",\"age\":30,\"active\":true},{\"name\":\"Bob\",\"age\":22,\"active\":false}]","field":"active","operation":"filter"}`),
				Output:      json.RawMessage(`{"item_count":1,"result":[{"active":true,"age":null,"name":"Alice"}],"result_type":"[]interface {}"}`),
			},
		},
	},
	"datetime_calculate": {
		Name:            "datetime_calculate",
		Description:     "Perform date/time arithmetic operations including add/subtract, duration, age, and business days",
		Category:        "datetime",
		Tags:            []string{"datetime", "arithmetic", "duration", "age", "business-days", "weekday", "calendar"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/datetime",
		ParameterSchema: json.RawMessage(`{"properties":{"end_date":{"description":"End date/time for duration calculations","type":"string"},"include_weekends":{"description":"Include weekends in business day calculations","type":"boolean"},"operation":{"description":"Operation to perform","enum":["add","subtract","duration","age","next_weekday","previous_weekday","add_business_days","subtract_business_days"],"type":"string"},"start_date":{"description":"Start date/time (RFC3339 format preferred)","type":"string"},"target_weekday":{"description":"Target weekday (0 = Sunday, 6 = Saturday)","type":"integer"},"timezone":{"description":"Timezone for calculations","type":"string"},"unit":{"description":"Unit for add/subtract operations","enum":["years","months","days","hours","minutes","seconds"],"type":"string"},"value":{"description":"Value to add/subtract","type":"integer"}},"required":["operation","start_date"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The datetime_calculate tool performs various date/time arithmetic operations:\n- add/subtract: Add or subtract years, months, days, hours, minutes, or seconds\n- duration: Calculate the duration between two dates\n- age: Calculate age from birth date to current date or specified date\n- next_weekday/previous_weekday: Find the next or previous occurrence of a specific weekday\n- add_business_days/subtract_business_days: Add or subtract business days (excluding weekends)\n\nAll operations support timezone specification and use RFC3339 format for dates.",
		Examples: []Example{
			{
				Name:        "Add days",
				Description: "Add 30 days to a date",
				Input:       json.RawMessage(`{"operation":"add","start_date":"2024-01-15","unit":"days","value":30}`),
				Output:      json.RawMessage(`{"result":"2024-02-14T00:00:00Z"}`),
			},
			{
				Name:        "Calculate age",
				Description: "Calculate age from birth date",
				Input:       json.RawMessage(`{"operation":"age","start_date":"1990-05-15"}`),
				Output:      json.RawMessage(`{"age":{"days":25,"human_readable":"34 years, 7 months and 25 days","months":7,"total_days":12653,"years":34}}`),
			},
			{
				Name:        "Duration between dates",
				Description: "Calculate duration between two dates",
				Input:       json.RawMessage(`{"end_date":"2024-12-31","operation":"duration","start_date":"2024-01-01"}`),
				Output:      json.RawMessage(`{"duration":{"days":365,"hours":0,"human_readable":"365 days","milliseconds":0,"minutes":0,"seconds":0,"total_seconds":31536000}}`),
			},
			{
				Name:        "Add business days",
				Description: "Add 10 business days to a date",
				Input:       json.RawMessage(`{"operation":"add_business_days","start_date":"2024-03-01","value":10}`),
				Output:      json.RawMessage(`{"business_days":10,"result":"2024-03-15T00:00:00Z"}`),
			},
			{
				Name:        "Next weekday",
				Description: "Find next Monday from a given date",
				Input:       json.RawMessage(`{"operation":"next_weekday","start_date":"2024-03-15","target_weekday":1}`),
				Output:      json.RawMessage(`{"result":"2024-03-18T00:00:00Z"}`),
			},
		},
	},
	"datetime_compare": {
		Name:            "datetime_compare",
		Description:     "Compare dates and times with operations like before/after, same period, range checks, and sorting",
		Category:        "datetime",
		Tags:            []string{"datetime", "comparison", "before", "after", "range", "sort", "period", "difference"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/datetime",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The datetime_compare tool provides comprehensive date/time comparison capabilities:\n\nOperations:\n1. Compare:\n   - Check if date1 is before, after, or equal to date2\n   - Calculate detailed time difference between dates\n   - Provides human-readable difference format\n   - Handles timezones correctly\n\n2. Same Period:\n   - Check if two dates fall within the same period\n   - Supported periods: day, week, month, year\n   - Week comparisons use ISO week numbering\n   - Timezone-aware comparisons\n\n3. Range Check:\n   - Verify if a date falls within a specified range\n   - Inclusive of both start and end dates\n   - Useful for deadline validation\n   - Date range filtering\n\n4. Sort:\n   - Sort multiple dates in ascending or descending order\n   - Handles any parseable date format\n   - Returns dates in RFC3339 format\n   - Efficient for large date lists\n\n5. Find Extreme:\n   - Find the earliest or latest date from a list\n   - Useful for finding min/max dates\n   - Deadline calculations\n   - Event scheduling\n\nTime Difference Output:\n- Days, hours, minutes, seconds breakdown\n- Total time in hours, minutes, and seconds\n- Human-readable format (e.g., \"2 days, 3 hours and 15 minutes\")\n- Direction indicator (ago/in the future)\n\nState Integration:\n- default_timezone: Used when timezone not specified in input\n\nCommon Use Cases:\n- Deadline validation and monitoring\n- Event scheduling and conflict detection\n- Age calculations and date arithmetic\n- Historical data analysis\n- Time period grouping and filtering",
		Examples: []Example{
			{
				Name:        "Basic date comparison",
				Description: "Compare two dates and get time difference",
				Input:       json.RawMessage(`{"date1":"2024-03-15T10:30:00Z","date2":"2024-03-20T15:45:00Z","operation":"compare"}`),
				Output:      json.RawMessage(`{"after":false,"before":true,"difference":{"days":5,"hours":5,"human_readable":"in 5 days, 5 hours and 15 minutes","minutes":15,"seconds":0,"total_hours":125.25,"total_minutes":7515,"total_seconds":450900},"equal":false}`),
			},
			{
				Name:        "Check same month",
				Description: "Verify if two dates are in the same month",
				Input:       json.RawMessage(`{"date1":"2024-03-05","date2":"2024-03-25","operation":"same_period","period_type":"month"}`),
				Output:      json.RawMessage(`{"same_period":true}`),
			},
			{
				Name:        "Check same week",
				Description: "Check if dates fall in the same ISO week",
				Input:       json.RawMessage(`{"date1":"2024-03-18","date2":"2024-03-22","operation":"same_period","period_type":"week"}`),
				Output:      json.RawMessage(`{"same_period":true}`),
			},
			{
				Name:        "Date range validation",
				Description: "Check if a date falls within a range",
				Input:       json.RawMessage(`{"date1":"2024-03-15","operation":"range_check","range_end":"2024-03-31","range_start":"2024-03-01"}`),
				Output:      json.RawMessage(`{"in_range":true}`),
			},
			{
				Name:        "Sort dates chronologically",
				Description: "Sort a list of dates in ascending order",
				Input:       json.RawMessage(`{"dates":["2024-12-25","2024-01-01","2024-07-04","2024-03-15"],"operation":"sort","sort_order":"asc"}`),
				Output:      json.RawMessage(`{"sorted_dates":["2024-01-01T00:00:00Z","2024-03-15T00:00:00Z","2024-07-04T00:00:00Z","2024-12-25T00:00:00Z"]}`),
			},
			{
				Name:        "Sort dates descending",
				Description: "Sort dates from newest to oldest",
				Input:       json.RawMessage(`{"dates":["2024-01-15","2024-03-10","2024-02-20"],"operation":"sort","sort_order":"desc"}`),
				Output:      json.RawMessage(`{"sorted_dates":["2024-03-10T00:00:00Z","2024-02-20T00:00:00Z","2024-01-15T00:00:00Z"]}`),
			},
			{
				Name:        "Find earliest date",
				Description: "Find the earliest date from a list",
				Input:       json.RawMessage(`{"dates":["2024-06-15","2024-03-01","2024-12-31","2024-01-10"],"extreme_type":"earliest","operation":"find_extreme"}`),
				Output:      json.RawMessage(`{"extreme_date":"2024-01-10T00:00:00Z"}`),
			},
			{
				Name:        "Find latest date",
				Description: "Find the most recent date",
				Input:       json.RawMessage(`{"dates":["2024-02-28","2024-03-15","2024-01-01"],"extreme_type":"latest","operation":"find_extreme"}`),
				Output:      json.RawMessage(`{"extreme_date":"2024-03-15T00:00:00Z"}`),
			},
			{
				Name:        "Compare with timezone",
				Description: "Compare dates in specific timezone",
				Input:       json.RawMessage(`{"date1":"2024-03-15 10:00:00","date2":"2024-03-15 14:00:00","operation":"compare","timezone":"America/New_York"}`),
				Output:      json.RawMessage(`{"after":false,"before":true,"difference":{"days":0,"hours":4,"human_readable":"in 4 hours","minutes":0,"seconds":0,"total_hours":4,"total_minutes":240,"total_seconds":14400},"equal":false}`),
			},
			{
				Name:        "Compare past dates",
				Description: "Compare dates where date1 is after date2",
				Input:       json.RawMessage(`{"date1":"2024-03-20","date2":"2024-03-15","operation":"compare"}`),
				Output:      json.RawMessage(`{"after":true,"before":false,"difference":{"days":5,"hours":0,"human_readable":"5 days ago","minutes":0,"seconds":0,"total_hours":120,"total_minutes":7200,"total_seconds":432000},"equal":false}`),
			},
		},
	},
	"datetime_convert": {
		Name:            "datetime_convert",
		Description:     "Convert date/time between timezones, unix timestamps, and provide timezone information",
		Category:        "datetime",
		Tags:            []string{"datetime", "timezone", "conversion", "timestamp", "unix", "dst", "iana"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/datetime",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The datetime_convert tool provides comprehensive timezone and timestamp conversion capabilities:\n\nOperations:\n1. Timezone Conversion:\n   - Convert dates between any IANA timezones\n   - Handles DST transitions automatically\n   - Preserves the exact moment in time\n   - Supports source timezone specification\n\n2. To Timestamp:\n   - Convert datetime to unix timestamps\n   - Outputs in seconds, milliseconds, microseconds, and nanoseconds\n   - Respects timezone information in the input\n   - Uses state timezone or UTC as default\n\n3. From Timestamp:\n   - Convert unix timestamps to datetime\n   - Supports various units: seconds, milliseconds, microseconds, nanoseconds\n   - Can output in any specified timezone\n   - Defaults to UTC if no timezone specified\n\n4. List Timezones:\n   - Get filtered list of IANA timezone identifiers\n   - Supports substring filtering\n   - Returns common timezones by default\n   - Useful for timezone discovery\n\nTimezone Information:\n- Full IANA timezone names (e.g., \"America/New_York\")\n- Timezone abbreviations (e.g., \"EST\", \"EDT\")\n- UTC offsets in \"+/-HH:MM\" format\n- Offset in seconds for calculations\n\nDST (Daylight Saving Time) Information:\n- Current DST status\n- Standard and DST timezone names\n- Standard and DST offsets\n- Automatic detection of DST periods\n\nState Integration:\n- default_timezone: Used when from_timezone not specified for to_timestamp\n\nCommon Timezone Examples:\n- Americas: America/New_York, America/Chicago, America/Los_Angeles, America/Toronto\n- Europe: Europe/London, Europe/Paris, Europe/Berlin, Europe/Moscow\n- Asia: Asia/Tokyo, Asia/Shanghai, Asia/Kolkata, Asia/Dubai\n- Pacific: Australia/Sydney, Pacific/Auckland, Pacific/Honolulu",
		Examples: []Example{
			{
				Name:        "Convert between timezones",
				Description: "Convert a New York time to Tokyo time",
				Input:       json.RawMessage(`{"datetime":"2024-03-15T10:30:00-04:00","from_timezone":"America/New_York","operation":"timezone","to_timezone":"Asia/Tokyo"}`),
				Output:      json.RawMessage(`{"converted":"2024-03-15T23:30:00+09:00","timezone_info":{"abbreviation":"JST","name":"Asia/Tokyo","offset":"+09:00","offset_seconds":32400}}`),
			},
			{
				Name:        "Convert with DST information",
				Description: "Convert time and get DST details",
				Input:       json.RawMessage(`{"datetime":"2024-07-15T10:00:00Z","include_dst":true,"operation":"timezone","to_timezone":"America/New_York"}`),
				Output:      json.RawMessage(`{"converted":"2024-07-15T06:00:00-04:00","dst_info":{"current_offset":"-04:00","dst_name":"EDT","dst_offset":"-04:00","is_dst":true,"standard_name":"EST","standard_offset":"-05:00"}}`),
			},
			{
				Name:        "Convert datetime to timestamps",
				Description: "Get unix timestamps in various units",
				Input:       json.RawMessage(`{"datetime":"2024-03-15T14:30:45.123Z","operation":"to_timestamp"}`),
				Output:      json.RawMessage(`{"timestamp":null,"timestamp_micros":null,"timestamp_millis":null,"timestamp_nanos":null}`),
			},
			{
				Name:        "Convert timestamp to datetime",
				Description: "Convert unix timestamp to readable date",
				Input:       json.RawMessage(`{"operation":"from_timestamp","timestamp":null,"timestamp_unit":"seconds","to_timezone":"Europe/London"}`),
				Output:      json.RawMessage(`{"converted":"2024-03-15T14:30:45Z","timezone_info":{"abbreviation":"GMT","name":"Europe/London","offset":"+00:00","offset_seconds":0}}`),
			},
			{
				Name:        "Convert millisecond timestamp",
				Description: "Convert JavaScript-style millisecond timestamp",
				Input:       json.RawMessage(`{"operation":"from_timestamp","timestamp":null,"timestamp_unit":"milliseconds","to_timezone":"America/Los_Angeles"}`),
				Output:      json.RawMessage(`{"converted":"2024-03-15T07:30:45.123-07:00","timezone_info":{"abbreviation":"PDT","name":"America/Los_Angeles","offset":"-07:00","offset_seconds":null}}`),
			},
			{
				Name:        "List European timezones",
				Description: "Find all European timezone identifiers",
				Input:       json.RawMessage(`{"operation":"list_timezones","timezone_filter":"Europe"}`),
				Output:      json.RawMessage(`{"timezones":["Europe/Amsterdam","Europe/Athens","Europe/Berlin","Europe/Brussels","Europe/Dublin","Europe/Helsinki","Europe/Lisbon","Europe/London","Europe/Madrid","Europe/Moscow","Europe/Paris","Europe/Rome","Europe/Stockholm","Europe/Vienna","Europe/Warsaw"]}`),
			},
			{
				Name:        "Convert without source timezone",
				Description: "Convert assuming UTC source",
				Input:       json.RawMessage(`{"datetime":"2024-03-15T14:30:00Z","operation":"timezone","to_timezone":"Australia/Sydney"}`),
				Output:      json.RawMessage(`{"converted":"2024-03-16T01:30:00+11:00","timezone_info":{"abbreviation":"AEDT","name":"Australia/Sydney","offset":"+11:00","offset_seconds":39600}}`),
			},
			{
				Name:        "Timestamp with timezone context",
				Description: "Convert local time to timestamp",
				Input:       json.RawMessage(`{"datetime":"2024-03-15 10:30:00","from_timezone":"America/Chicago","operation":"to_timestamp"}`),
				Output:      json.RawMessage(`{"timestamp":null,"timestamp_micros":null,"timestamp_millis":null,"timestamp_nanos":null}`),
			},
		},
	},
	"datetime_format": {
		Name:            "datetime_format",
		Description:     "Format date/time strings with standard formats, custom layouts, relative time, and localization",
		Category:        "datetime",
		Tags:            []string{"datetime", "format", "localization", "relative-time", "i18n", "display"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/datetime",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The datetime_format tool provides flexible date/time formatting capabilities:\n\nFormat Types:\n1. Standard Formats:\n   - RFC3339: \"2006-01-02T15:04:05Z07:00\" (default)\n   - RFC1123: \"Mon, 02 Jan 2006 15:04:05 MST\"\n   - RFC822: \"02 Jan 06 15:04 MST\"\n   - ISO8601: \"2006-01-02T15:04:05Z07:00\"\n   - Kitchen: \"3:04PM\"\n   - Stamp: \"Jan _2 15:04:05\"\n   - UnixDate: \"Mon Jan _2 15:04:05 MST 2006\"\n\n2. Custom Formats:\n   Use Go's time layout syntax with these reference components:\n   - Year: \"2006\" (4 digits), \"06\" (2 digits)\n   - Month: \"01\" or \"1\" (number), \"Jan\" (short name), \"January\" (full name)\n   - Day: \"02\" or \"2\" (day of month), \"_2\" (space-padded)\n   - Weekday: \"Mon\" (short), \"Monday\" (full)\n   - Hour: \"15\" (24-hour), \"03\" or \"3\" (12-hour), \"PM\" (AM/PM)\n   - Minute: \"04\" or \"4\"\n   - Second: \"05\" or \"5\"\n   - Millisecond: \".000\" (decimal), \".999\" (trailing zeros removed)\n   - Timezone: \"MST\" (name), \"-0700\" (numeric), \"Z07:00\" (ISO 8601)\n\n3. Relative Time:\n   Formats dates as human-readable relative times:\n   - \"a few seconds ago\", \"in 3 minutes\"\n   - \"yesterday at 15:04\", \"tomorrow at 09:30\"\n   - \"3 days ago\", \"in 2 weeks\"\n   - \"1 month ago\", \"in 1 year\"\n   - Optional weekday inclusion: \"3 days ago (Monday)\"\n\n4. Multiple Formats:\n   Output the same date in multiple formats simultaneously.\n   Specify format names or custom format strings.\n\nLocalization:\nBasic support for Spanish (es), French (fr), and German (de):\n- Localized month names (full and short)\n- Localized weekday names (full and short)  \n- AM/PM indicators where applicable\n\nState Integration:\n- default_timezone: Default timezone if not specified in input\n\nExamples of Custom Formats:\n- \"Monday, January 2, 2006\": Full date with weekday\n- \"02/01/2006 15:04:05\": European datetime\n- \"Jan 2 '06 at 3:04pm\": Compact friendly format\n- \"2006-W01-1\": ISO week date\n- \"2006.01.02 AD at 15:04 MST\": With era",
		Examples: []Example{
			{
				Name:        "Standard RFC3339 format",
				Description: "Format using the default standard format",
				Input:       json.RawMessage(`{"datetime":"2024-03-15T14:30:45Z"}`),
				Output:      json.RawMessage(`{"formatted":"2024-03-15T14:30:45Z"}`),
			},
			{
				Name:        "Human-readable custom format",
				Description: "Format date in a friendly, readable way",
				Input:       json.RawMessage(`{"custom_format":"Monday, January 2, 2006 at 3:04 PM","datetime":"2024-03-15T14:30:45Z","format_type":"custom"}`),
				Output:      json.RawMessage(`{"formatted":"Friday, March 15, 2024 at 2:30 PM"}`),
			},
			{
				Name:        "Relative time format",
				Description: "Show time relative to now",
				Input:       json.RawMessage(`{"datetime":"2024-03-12T10:00:00Z","format_type":"relative","include_weekday":true}`),
				Output:      json.RawMessage(`{"formatted":"3 days ago (Tuesday)","relative_time":"3 days ago (Tuesday)"}`),
			},
			{
				Name:        "Multiple format output",
				Description: "Get the same date in multiple formats",
				Input:       json.RawMessage(`{"datetime":"2024-03-15T14:30:45-04:00","format_type":"multiple","formats":["RFC3339","2006-01-02","Kitchen","Monday"]}`),
				Output:      json.RawMessage(`{"multiple_formats":{"2006-01-02":"2024-03-15","Kitchen":"2:30PM","Monday":"Friday","RFC3339":"2024-03-15T14:30:45-04:00"}}`),
			},
			{
				Name:        "Localized format with Spanish",
				Description: "Format date with Spanish month and weekday names",
				Input:       json.RawMessage(`{"custom_format":"Monday, 2 January 2006","datetime":"2024-03-15T14:30:45Z","format_type":"custom","locale":"es"}`),
				Output:      json.RawMessage(`{"formatted":"Friday, 15 March 2024","localized":{"month_name":"marzo","month_name_short":"mar","period":"PM","weekday_name":"viernes","weekday_short":"vie"}}`),
			},
			{
				Name:        "Format with timezone",
				Description: "Format date in a specific timezone",
				Input:       json.RawMessage(`{"custom_format":"Jan 2, 2006 3:04 PM MST","datetime":"2024-03-15T14:30:45Z","format_type":"custom","timezone":"America/New_York"}`),
				Output:      json.RawMessage(`{"formatted":"Mar 15, 2024 10:30 AM EDT"}`),
			},
			{
				Name:        "Kitchen time format",
				Description: "Simple time format for casual display",
				Input:       json.RawMessage(`{"datetime":"2024-03-15T14:30:45Z","format_type":"standard","standard_format":"Kitchen"}`),
				Output:      json.RawMessage(`{"formatted":"2:30PM"}`),
			},
			{
				Name:        "Relative time for recent events",
				Description: "Format very recent times",
				Input:       json.RawMessage(`{"datetime":"2024-03-15T14:29:30Z","format_type":"relative"}`),
				Output:      json.RawMessage(`{"formatted":"1 minute ago","relative_time":"1 minute ago"}`),
			},
		},
	},
	"datetime_info": {
		Name:            "datetime_info",
		Description:     "Get comprehensive information about a specific date including day/week/month/year info and period boundaries",
		Category:        "datetime",
		Tags:            []string{"datetime", "calendar", "date-analysis", "timezone", "week", "month", "year", "iso8601"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/datetime",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The datetime_info tool provides comprehensive information about a specific date, including:\n- Day information: day of week, day of month, day of year\n- Week information: ISO week number and week year\n- Month information: month number, name, and days in month\n- Quarter information\n- Year information including leap year status\n- Period boundaries: start/end of week, month, quarter, and year\n\nThe tool accepts dates in various formats but prefers RFC3339. It can work with different timezones and allows customizing the week start day.",
		Examples: []Example{
			{
				Name:        "Basic date info",
				Description: "Get information about a specific date",
				Input:       json.RawMessage(`{"date":"2024-03-15T10:30:00Z"}`),
				Output:      json.RawMessage(`{"date":"2024-03-15T10:30:00Z","day_of_month":15,"day_of_week":5,"day_of_week_iso":5,"day_of_week_name":"Friday","day_of_year":75,"is_leap_year":true,"month":3,"month_name":"March","year":2024}`),
			},
			{
				Name:        "Date info with timezone",
				Description: "Get date information in a specific timezone",
				Input:       json.RawMessage(`{"date":"2024-07-04","timezone":"America/New_York"}`),
				Output:      json.RawMessage(`{"date":"2024-07-04T00:00:00-04:00","day_of_week":4,"day_of_week_name":"Thursday","month_name":"July","quarter":3}`),
			},
			{
				Name:        "Monday week start",
				Description: "Get date info with Monday as the start of the week",
				Input:       json.RawMessage(`{"date":"2024-12-25","week_start_day":1}`),
				Output:      json.RawMessage(`{"date":"2024-12-25T00:00:00Z","day_of_week":3,"end_of_week":"2024-12-29T23:59:59.999999999Z","start_of_week":"2024-12-23T00:00:00Z","week_number":52}`),
			},
			{
				Name:        "Leap year check",
				Description: "Check if a year is a leap year and get February info",
				Input:       json.RawMessage(`{"date":"2024-02-29"}`),
				Output:      json.RawMessage(`{"date":"2024-02-29T00:00:00Z","days_in_month":29,"is_leap_year":true,"month_name":"February"}`),
			},
			{
				Name:        "Quarter boundaries",
				Description: "Get quarter information and boundaries",
				Input:       json.RawMessage(`{"date":"2024-05-15"}`),
				Output:      json.RawMessage(`{"end_of_quarter":"2024-06-30T23:59:59.999999999Z","quarter":2,"start_of_quarter":"2024-04-01T00:00:00Z"}`),
			},
			{
				Name:        "ISO week numbering",
				Description: "Get ISO week information for edge cases",
				Input:       json.RawMessage(`{"date":"2024-01-01"}`),
				Output:      json.RawMessage(`{"day_of_year":1,"week_number":1,"week_year":2024}`),
			},
			{
				Name:        "Component extraction",
				Description: "Extract all date components for analysis",
				Input:       json.RawMessage(`{"date":"2024-09-30T14:45:30Z"}`),
				Output:      json.RawMessage(`{"day_of_month":30,"day_of_year":274,"days_in_month":30,"end_of_month":"2024-09-30T23:59:59.999999999Z","end_of_year":"2024-12-31T23:59:59.999999999Z","start_of_year":"2024-01-01T00:00:00Z"}`),
			},
		},
	},
	"datetime_now": {
		Name:            "datetime_now",
		Description:     "Get current date/time in various formats with timezone support",
		Category:        "datetime",
		Tags:            []string{"datetime", "current-time", "timezone", "now", "timestamp", "utc", "local"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/datetime",
		ParameterSchema: json.RawMessage(`{"properties":{"format":{"description":"Custom format string (Go time format)","type":"string"},"include_components":{"description":"Include individual date/time components","type":"boolean"},"include_timestamps":{"description":"Include unix timestamps","type":"boolean"},"include_week_info":{"description":"Include week-related information","type":"boolean"},"timezone":{"description":"Timezone to get current time in (e.g., 'America/New_York', 'Europe/London')","type":"string"}},"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "Use this tool to get the current date and time in various formats and timezones.\n\nBasic Usage:\n- Returns both UTC and local time by default\n- Supports any valid IANA timezone (e.g., \"America/New_York\", \"Europe/London\", \"Asia/Tokyo\")\n- Can include detailed components, week information, and timestamps\n\nTimezone Support:\n- Common US: America/New_York, America/Chicago, America/Denver, America/Los_Angeles\n- Europe: Europe/London, Europe/Paris, Europe/Berlin, Europe/Moscow\n- Asia: Asia/Tokyo, Asia/Shanghai, Asia/Kolkata, Asia/Dubai\n- Pacific: Pacific/Auckland, Australia/Sydney\n- Use empty string or omit for UTC and local time only\n\nFormat Options:\n- Default: RFC3339 (ISO 8601) format\n- Custom format using Go time format patterns:\n  - \"2006-01-02\": Date only (YYYY-MM-DD)\n  - \"15:04:05\": Time only (HH:MM:SS)\n  - \"Mon, 02 Jan 2006 15:04:05 MST\": RFC1123 with timezone\n  - \"January 2, 2006\": Human readable date\n  - \"3:04 PM\": 12-hour time\n  - \"2006-01-02T15:04:05Z07:00\": Full ISO 8601\n\nComponent Information (include_components):\n- Year, Month (number and name), Day\n- Hour (24-hour), Minute, Second, Nanosecond\n- Weekday (number 0-6, Sunday=0) and name\n\nWeek Information (include_week_info):\n- ISO week number (1-53)\n- ISO day of week (1-7, Monday=1, Sunday=7)\n- Day of year (1-366)\n- Quarter (1-4)\n- Leap year indicator\n\nTimestamps (include_timestamps):\n- Unix: Seconds since January 1, 1970 UTC\n- UnixMilli: Milliseconds since epoch\n- UnixMicro: Microseconds since epoch\n- UnixNano: Nanoseconds since epoch\n\nState Integration:\n- datetime_default_timezone: Default timezone if not specified\n- datetime_default_format: Default format string if not specified",
		Examples: []Example{
			{
				Name:        "Get current time in UTC and local",
				Description: "Basic usage without parameters",
				Output:      json.RawMessage(`{"local":"2024-01-15T09:30:45-05:00","utc":"2024-01-15T14:30:45Z"}`),
			},
			{
				Name:        "Get time in specific timezone",
				Description: "Request time in New York timezone",
				Input:       json.RawMessage(`{"timezone":"America/New_York"}`),
				Output:      json.RawMessage(`{"local":"2024-01-15T09:30:45-05:00","timezone":"2024-01-15T09:30:45-05:00","timezone_name":"America/New_York","utc":"2024-01-15T14:30:45Z"}`),
			},
			{
				Name:        "Get time with components",
				Description: "Include individual date/time components",
				Input:       json.RawMessage(`{"include_components":true,"timezone":"Europe/London"}`),
				Output:      json.RawMessage(`{"components":{"day":15,"hour":14,"minute":30,"month":1,"month_name":"January","nanosecond":0,"second":45,"weekday":1,"weekday_name":"Monday","year":2024},"local":"2024-01-15T09:30:45-05:00","timezone":"2024-01-15T14:30:45Z","timezone_name":"Europe/London","utc":"2024-01-15T14:30:45Z"}`),
			},
			{
				Name:        "Get time with week information",
				Description: "Include week-related details",
				Input:       json.RawMessage(`{"include_week_info":true}`),
				Output:      json.RawMessage(`{"local":"2024-03-15T06:00:00-04:00","utc":"2024-03-15T10:00:00Z","week_info":{"day_of_week":5,"day_of_year":75,"is_leap_year":true,"quarter":1,"week_number":11}}`),
			},
			{
				Name:        "Get time with custom format",
				Description: "Format time using custom pattern",
				Input:       json.RawMessage(`{"format":"2006年01月02日 15:04:05","timezone":"Asia/Tokyo"}`),
				Output:      json.RawMessage(`{"formatted":"2024年01月15日 23:30:45","local":"2024-01-15T09:30:45-05:00","timezone":"2024-01-15T23:30:45+09:00","timezone_name":"Asia/Tokyo","utc":"2024-01-15T14:30:45Z"}`),
			},
			{
				Name:        "Get Unix timestamps",
				Description: "Include various Unix timestamp formats",
				Input:       json.RawMessage(`{"include_timestamps":true}`),
				Output:      json.RawMessage(`{"local":"2024-01-15T09:30:45-05:00","timestamps":{"unix":null,"unix_micro":null,"unix_milli":null,"unix_nano":null},"utc":"2024-01-15T14:30:45Z"}`),
			},
			{
				Name:        "Get all information",
				Description: "Request all available information",
				Input:       json.RawMessage(`{"format":"Monday, January 2, 2006 3:04 PM MST","include_components":true,"include_timestamps":true,"include_week_info":true,"timezone":"Australia/Sydney"}`),
				Output:      json.RawMessage(`{"components":{"day":15,"hour":14,"minute":30,"month":7,"month_name":"July","nanosecond":0,"second":45,"weekday":1,"weekday_name":"Monday","year":2024},"formatted":"Monday, July 15, 2024 2:30 PM AEST","local":"2024-07-15T00:30:45-04:00","timestamps":{"unix":null,"unix_micro":null,"unix_milli":null,"unix_nano":null},"timezone":"2024-07-15T14:30:45+10:00","timezone_name":"Australia/Sydney","utc":"2024-07-15T04:30:45Z","week_info":{"day_of_week":1,"day_of_year":197,"is_leap_year":true,"quarter":3,"week_number":29}}`),
			},
		},
	},
	"datetime_parse": {
		Name:            "datetime_parse",
		Description:     "Parse and validate date/time strings with automatic format detection and relative date support",
		Category:        "datetime",
		Tags:            []string{"datetime", "parse", "validation", "format-detection", "relative-dates", "timestamp"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/datetime",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The datetime_parse tool intelligently parses date/time strings from various formats:\n\nFormat Detection:\n- Automatic detection of 30+ common date formats (ISO, RFC, US, EU, etc.)\n- Custom format specification using Go time layout patterns\n- Unix timestamp support (both seconds and milliseconds)\n- Relative date parsing (today, tomorrow, yesterday, next Monday, etc.)\n\nGo Time Format Reference:\n- Year: \"2006\" (4 digits), \"06\" (2 digits)\n- Month: \"01\" or \"1\" (number), \"Jan\" (short name), \"January\" (full name)\n- Day: \"02\" or \"2\" (day of month), \"Mon\" (weekday short), \"Monday\" (weekday full)\n- Hour: \"15\" (24-hour), \"03\" or \"3\" (12-hour)\n- Minute: \"04\" or \"4\"\n- Second: \"05\" or \"5\"\n- AM/PM: \"PM\" or \"pm\"\n- Timezone: \"MST\" (name), \"-0700\" (numeric offset), \"Z07:00\" (ISO 8601)\n\nCommon Format Examples:\n- \"2006-01-02\": ISO date (YYYY-MM-DD)\n- \"02/01/2006\": EU date (DD/MM/YYYY)\n- \"01/02/2006\": US date (MM/DD/YYYY)\n- \"2006-01-02 15:04:05\": Date time with 24-hour format\n- \"Jan 2, 2006 3:04 PM\": Human readable with 12-hour format\n- \"20060102\": Compact date (YYYYMMDD)\n- \"20060102150405\": Compact datetime\n\nRelative Date Support:\n- Simple: now, today, yesterday, tomorrow\n- Days: \"in 3 days\", \"5 days ago\"\n- Weeks: \"in 2 weeks\", \"1 week ago\", \"next week\", \"last week\"\n- Months: \"in 6 months\", \"2 months ago\", \"next month\", \"last month\"\n- Years: \"next year\", \"last year\"\n- Hours: \"in 4 hours\", \"3 hours ago\"\n- Weekdays: \"next Monday\", \"last Friday\"\n\nState Integration:\n- default_timezone: Default timezone if not specified in input\n\nAuto-detection tries formats in order of specificity to ensure accurate parsing.",
		Examples: []Example{
			{
				Name:        "Parse ISO date",
				Description: "Parse a standard ISO formatted date",
				Input:       json.RawMessage(`{"date_string":"2024-03-15"}`),
				Output:      json.RawMessage(`{"detected_format":"ISO Date","parsed":"2024-03-15T00:00:00Z","unix_timestamp":null,"valid":true}`),
			},
			{
				Name:        "Parse with custom format",
				Description: "Parse using a specific date format",
				Input:       json.RawMessage(`{"date_string":"15/03/2024 14:30","format":"02/01/2006 15:04"}`),
				Output:      json.RawMessage(`{"detected_format":"custom format","parsed":"2024-03-15T14:30:00Z","unix_timestamp":null,"valid":true}`),
			},
			{
				Name:        "Parse relative date",
				Description: "Parse natural language relative dates",
				Input:       json.RawMessage(`{"date_string":"tomorrow"}`),
				Output:      json.RawMessage(`{"detected_format":"relative date","parsed":"2024-03-16T00:00:00Z","unix_timestamp":null,"valid":true}`),
			},
			{
				Name:        "Parse Unix timestamp",
				Description: "Convert Unix timestamp to date",
				Input:       json.RawMessage(`{"date_string":"1710460800"}`),
				Output:      json.RawMessage(`{"detected_format":"Unix timestamp (seconds)","parsed":"2024-03-15T00:00:00Z","unix_timestamp":null,"valid":true}`),
			},
			{
				Name:        "Parse with timezone",
				Description: "Parse date in specific timezone",
				Input:       json.RawMessage(`{"date_string":"2024-03-15 15:30:00","timezone":"America/New_York"}`),
				Output:      json.RawMessage(`{"detected_format":"DateTime","parsed":"2024-03-15T15:30:00-04:00","unix_timestamp":null,"valid":true}`),
			},
			{
				Name:        "Parse complex relative date",
				Description: "Parse relative date with reference time",
				Input:       json.RawMessage(`{"date_string":"next Monday","reference_time":"2024-03-15T10:00:00Z"}`),
				Output:      json.RawMessage(`{"detected_format":"relative date","parsed":"2024-03-18T00:00:00Z","unix_timestamp":null,"valid":true}`),
			},
			{
				Name:        "Parse ambiguous date with auto-detect",
				Description: "Let the tool detect ambiguous date format",
				Input:       json.RawMessage(`{"auto_detect":true,"date_string":"03/04/2024"}`),
				Output:      json.RawMessage(`{"detected_format":"US Date","parsed":"2024-03-04T00:00:00Z","unix_timestamp":null,"valid":true}`),
			},
			{
				Name:        "Parse with validation errors",
				Description: "Handle invalid date string",
				Input:       json.RawMessage(`{"date_string":"not a date"}`),
				Output:      json.RawMessage(`{"detected_format":"","parsed":"","unix_timestamp":null,"valid":false,"validation_errors":["Unable to parse date string with any known format"]}`),
			},
		},
	},
	"execute_command": {
		Name:            "execute_command",
		Description:     "Executes system commands with enhanced control and security",
		Category:        "system",
		Tags:            []string{"command", "shell", "execution", "system", "process"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/system",
		ParameterSchema: json.RawMessage(`{"properties":{"command":{"description":"The command to execute","type":"string"},"environment":{"description":"Environment variables to set (merged with current environment)","type":"object"},"input":{"description":"Input to provide to the command via stdin","type":"string"},"safe_mode":{"description":"Enable safe mode to restrict dangerous commands (default: true)","type":"boolean"},"shell":{"description":"Shell to use (sh, bash, zsh, or none for direct execution)","type":"string"},"timeout":{"description":"Timeout in seconds (default: 30, max: 300)","type":"number"},"working_dir":{"description":"Working directory for command execution","type":"string"}},"required":["command"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"command":{"description":"The command that was executed","type":"string"},"duration_ms":{"description":"Duration of command execution in milliseconds","type":"number"},"environment":{"description":"Custom environment variables that were set","type":"object"},"exit_code":{"description":"Exit code of the command (0 indicates success)","type":"number"},"stderr":{"description":"Standard error output from the command","type":"string"},"stdout":{"description":"Standard output from the command","type":"string"},"success":{"description":"Whether the command executed successfully","type":"boolean"},"timed_out":{"description":"Whether the command timed out","type":"boolean"},"working_dir":{"description":"The working directory where the command was executed","type":"string"}},"required":["stdout","stderr","exit_code","success","command","working_dir","duration_ms"],"type":"object"}`),
		UsageHint:       "Use this tool to execute system commands with enhanced control and security features.\n\nSecurity Features:\n- Safe mode (enabled by default) restricts dangerous commands\n- Allowlisted commands in safe mode include common utilities\n- Custom commands can be allowed via state configuration\n- Command validation prevents injection attacks\n\nParameters:\n- command: The command to execute (required)\n- working_dir: Directory to execute in (optional, defaults to current)\n- environment: Key-value pairs to add to environment (optional)\n- timeout: Maximum execution time in seconds (optional, default 30, max 300)\n- shell: Shell to use - sh, bash, zsh, or none for direct execution (optional, default sh)\n- safe_mode: Enable/disable command safety checks (optional, default true)\n- input: Data to provide via stdin (optional)\n\nOutput includes:\n- stdout: Standard output from the command\n- stderr: Standard error output\n- exit_code: Command exit code (0 = success)\n- success: Boolean indicating successful execution\n- timed_out: Whether the command exceeded timeout\n- duration_ms: Execution time in milliseconds\n\nSafe Mode:\nWhen safe_mode is true (default), the tool:\n1. Blocks dangerous commands (rm, shutdown, format, etc.)\n2. Blocks dangerous patterns (sudo, redirects, pipes, etc.)\n3. Only allows commands from a safe allowlist\n4. Permits full paths to system directories (/usr/bin/, /bin/, etc.)\n\nTo allow additional commands in safe mode, set them in state:\nstate.Set(\"allowed_commands\", []string{\"custom-tool\", \"my-script\"})",
		Examples: []Example{
			{
				Name:        "Basic command execution",
				Description: "Execute a simple echo command",
				Input:       json.RawMessage(`{"command":"echo 'Hello, World!'"}`),
				Output:      json.RawMessage(`{"exit_code":0,"stderr":"","stdout":"Hello, World!\n","success":true,"timed_out":false}`),
			},
			{
				Name:        "List directory contents",
				Description: "List files in a specific directory",
				Input:       json.RawMessage(`{"command":"ls -la","working_dir":"/tmp"}`),
				Output:      json.RawMessage(`{"exit_code":0,"stdout":"total 8\ndrwxrwxrwt  2 root root 4096 Jan  1 00:00 .\ndrwxr-xr-x 23 root root 4096 Jan  1 00:00 ..\n","success":true}`),
			},
			{
				Name:        "Environment variable usage",
				Description: "Execute command with custom environment variables",
				Input:       json.RawMessage(`{"command":"echo $MY_VAR - $HOME","environment":{"MY_VAR":"custom value"}}`),
				Output:      json.RawMessage(`{"stdout":"custom value - /home/user\n","success":true}`),
			},
			{
				Name:        "Command with timeout",
				Description: "Execute a long-running command with timeout",
				Input:       json.RawMessage(`{"command":"sleep 10","timeout":2}`),
				Output:      json.RawMessage(`{"duration_ms":2000,"exit_code":null,"stderr":"","stdout":"","success":false,"timed_out":true}`),
			},
			{
				Name:        "Direct command execution",
				Description: "Execute command without shell interpretation",
				Input:       json.RawMessage(`{"command":"/usr/bin/ls -la /tmp","shell":"none"}`),
				Output:      json.RawMessage(`{"success":true}`),
			},
			{
				Name:        "Command with input",
				Description: "Provide input to a command via stdin",
				Input:       json.RawMessage(`{"command":"wc -l","input":"line1\nline2\nline3\n"}`),
				Output:      json.RawMessage(`{"stdout":"3\n","success":true}`),
			},
			{
				Name:        "Error handling example",
				Description: "Handle command that returns non-zero exit code",
				Input:       json.RawMessage(`{"command":"ls /nonexistent-directory"}`),
				Output:      json.RawMessage(`{"exit_code":2,"stderr":"ls: cannot access '/nonexistent-directory': No such file or directory\n","stdout":"","success":false}`),
			},
		},
	},
	"feed_aggregate": {
		Name:            "feed_aggregate",
		Description:     "Combine multiple feeds into one unified feed with sorting and deduplication",
		Category:        "feed",
		Tags:            []string{"feed", "aggregate", "combine", "merge", "sort", "deduplicate"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/feed",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The feed_aggregate tool combines multiple feeds into a single unified feed:\n\nAggregation Features:\n1. Feed Combination:\n   - Merges items from all input feeds\n   - Preserves all item metadata\n   - Maintains feed structure consistency\n\n2. Sorting Options:\n   - By date: Published date (falls back to updated date)\n   - By title: Alphabetical sorting\n   - Ascending or descending order\n   - Items without dates sorted to end\n\n3. Duplicate Removal:\n   - Detects duplicates by URL (primary)\n   - Falls back to content hash (MD5 of title+description+content)\n   - Preserves first occurrence\n\n4. Metadata Merging:\n   - Combines feed titles: \"Aggregated: Feed1, Feed2, ...\"\n   - Joins descriptions with \" | \" separator\n   - Uses most recent updated timestamp\n   - Preserves first feed's other metadata\n\n5. Result Limiting:\n   - Apply max_items after sorting and deduplication\n   - Useful for creating \"top N\" feeds\n\nState Integration:\n- feed_aggregate_default_sort: Default sort field (date/title)\n- feed_aggregate_max_items: Default item limit\n\nCommon Use Cases:\n- Multi-source news aggregation\n- Creating unified podcast feeds\n- Combining team/department blogs\n- Building curated content feeds\n- Cross-source content monitoring",
		Examples: []Example{
			{
				Name:        "Basic feed aggregation",
				Description: "Combine multiple news feeds",
				Input:       json.RawMessage(`{"feeds":[{"items":[{"link":"https://tech.example.com/ai","published":"2024-03-20T10:00:00Z","title":"AI Breakthrough"},{"link":"https://tech.example.com/phone","published":"2024-03-19T10:00:00Z","title":"New Smartphone"}],"title":"Tech News"},{"items":[{"link":"https://science.example.com/mars","published":"2024-03-21T10:00:00Z","title":"Mars Discovery"}],"title":"Science Daily"}]}`),
				Output:      json.RawMessage(`{"dupes_removed":0,"feed":{"items":[{"link":"https://tech.example.com/phone","published":"2024-03-19T10:00:00Z","title":"New Smartphone"},{"link":"https://tech.example.com/ai","published":"2024-03-20T10:00:00Z","title":"AI Breakthrough"},{"link":"https://science.example.com/mars","published":"2024-03-21T10:00:00Z","title":"Mars Discovery"}]},"source_count":2,"total_items":3}`),
			},
			{
				Name:        "Sort by date descending",
				Description: "Aggregate with most recent items first",
				Input:       json.RawMessage(`{"feeds":[{"items":[{"published":"2024-01-01T10:00:00Z","title":"Old Post"},{"published":"2024-03-20T10:00:00Z","title":"Recent Post"},{"published":"2024-03-19T10:00:00Z","title":"Yesterday's Post"}]}],"sort_by":"date","sort_descending":true}`),
				Output:      json.RawMessage(`{"dupes_removed":0,"feed":{"items":[{"published":"2024-03-20T10:00:00Z","title":"Recent Post"},{"published":"2024-03-19T10:00:00Z","title":"Yesterday's Post"},{"published":"2024-01-01T10:00:00Z","title":"Old Post"}]},"source_count":1,"total_items":3}`),
			},
			{
				Name:        "Remove duplicates",
				Description: "Aggregate and remove duplicate items",
				Input:       json.RawMessage(`{"feeds":[{"items":[{"link":"https://example.com/article1","title":"Shared Article"},{"link":"https://example.com/article2","title":"Unique to A"}],"title":"Feed A"},{"items":[{"link":"https://example.com/article1","title":"Shared Article"},{"link":"https://example.com/article3","title":"Unique to B"}],"title":"Feed B"}],"remove_dupes":true}`),
				Output:      json.RawMessage(`{"dupes_removed":1,"feed":{"items":[{"link":"https://example.com/article1","title":"Shared Article"},{"link":"https://example.com/article2","title":"Unique to A"},{"link":"https://example.com/article3","title":"Unique to B"}]},"source_count":2,"total_items":4}`),
			},
			{
				Name:        "Merge metadata",
				Description: "Aggregate with combined feed metadata",
				Input:       json.RawMessage(`{"feeds":[{"description":"Latest technology news","items":[{"title":"Tech Post"}],"title":"Tech Blog"},{"description":"Scientific discoveries","items":[{"title":"Science Post"}],"title":"Science Blog"}],"merge_metadata":true}`),
				Output:      json.RawMessage(`{"feed":{"description":"Latest technology news | Scientific discoveries","items":[{"title":"Tech Post"},{"title":"Science Post"}],"title":"Aggregated: Tech Blog, Science Blog"},"source_count":2,"total_items":2}`),
			},
			{
				Name:        "Sort by title",
				Description: "Aggregate and sort alphabetically",
				Input:       json.RawMessage(`{"feeds":[{"items":[{"title":"Zebra Article"},{"title":"Apple News"},{"title":"Microsoft Update"}]}],"sort_by":"title"}`),
				Output:      json.RawMessage(`{"feed":{"items":[{"title":"Apple News"},{"title":"Microsoft Update"},{"title":"Zebra Article"}]},"source_count":1,"total_items":3}`),
			},
			{
				Name:        "Limit aggregated items",
				Description: "Create a top-N feed",
				Input:       json.RawMessage(`{"feeds":[{"items":[{"published":"2024-03-20T10:00:00Z","title":"Post 1"},{"published":"2024-03-19T10:00:00Z","title":"Post 2"},{"published":"2024-03-18T10:00:00Z","title":"Post 3"}]},{"items":[{"published":"2024-03-21T10:00:00Z","title":"Post 4"},{"published":"2024-03-17T10:00:00Z","title":"Post 5"}]}],"max_items":3,"sort_by":"date","sort_descending":true}`),
				Output:      json.RawMessage(`{"feed":{"items":[{"published":"2024-03-21T10:00:00Z","title":"Post 4"},{"published":"2024-03-20T10:00:00Z","title":"Post 1"},{"published":"2024-03-19T10:00:00Z","title":"Post 2"}]},"source_count":2,"total_items":5}`),
			},
			{
				Name:        "Handle items without dates",
				Description: "Aggregate with mixed date availability",
				Input:       json.RawMessage(`{"feeds":[{"items":[{"published":"2024-03-20T10:00:00Z","title":"Dated Item"},{"title":"No Date Item"},{"published":"2024-03-19T10:00:00Z","title":"Another Dated"}]}],"sort_by":"date","sort_descending":true}`),
				Output:      json.RawMessage(`{"feed":{"items":[{"published":"2024-03-20T10:00:00Z","title":"Dated Item"},{"published":"2024-03-19T10:00:00Z","title":"Another Dated"},{"title":"No Date Item"}]},"source_count":1,"total_items":3}`),
			},
			{
				Name:        "Empty feeds handling",
				Description: "Aggregate with some empty feeds",
				Input:       json.RawMessage(`{"feeds":[{"items":[{"title":"Only Item"}],"title":"Active Feed"},{"items":null,"title":"Empty Feed"}]}`),
				Output:      json.RawMessage(`{"feed":{"items":[{"title":"Only Item"}]},"source_count":2,"total_items":1}`),
			},
		},
	},
	"feed_convert": {
		Name:            "feed_convert",
		Description:     "Convert feeds between RSS, Atom, and JSON Feed formats",
		Category:        "feed",
		Tags:            []string{"feed", "convert", "transform", "rss", "atom", "json", "format"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/feed",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The feed_convert tool transforms feeds between different formats:\n\nSupported Conversions:\n1. RSS 2.0:\n   - Standard RSS format with channel/item structure\n   - Wide compatibility with feed readers\n   - Best for podcasts and traditional blogs\n   - Content included in description field\n\n2. Atom 1.0:\n   - IETF standard with better structure\n   - Separate content and summary fields\n   - Better date/time handling\n   - Required unique IDs for entries\n\n3. JSON Feed 1.1:\n   - Modern JSON-based format\n   - Easy to parse programmatically\n   - Native support for attachments\n   - Clean separation of content types\n\nConversion Features:\n- Preserves all standard feed elements\n- Maps fields appropriately between formats\n- Handles enclosures/attachments conversion\n- Maintains author information\n- Converts dates to appropriate formats\n- Optional pretty-printing for readability\n\nState Integration:\n- feed_convert_default_format: Default target format\n- feed_convert_pretty_print: Default pretty print setting\n\nCommon Use Cases:\n- Feed format migration\n- Cross-platform compatibility\n- API format requirements\n- Feed validation and testing\n- Format modernization",
		Examples: []Example{
			{
				Name:        "RSS to JSON Feed",
				Description: "Convert traditional RSS to modern JSON format",
				Input:       json.RawMessage(`{"feed":{"description":"Latest tech news","items":[{"content":"\u003cp\u003eFull article content...\u003c/p\u003e","description":"Brief summary","id":"post-1","link":"https://example.com/post-1","published":"2024-03-15T10:00:00Z","title":"New Technology"}],"link":"https://example.com","title":"Tech Blog"},"pretty":true,"target_type":"json"}`),
				Output:      json.RawMessage(`{"content":"{\n  \"version\": \"https://jsonfeed.org/version/1.1\",\n  \"title\": \"Tech Blog\",\n  \"home_page_url\": \"https://example.com\",\n  \"description\": \"Latest tech news\",\n  \"items\": [\n    {\n      \"id\": \"post-1\",\n      \"title\": \"New Technology\",\n      \"url\": \"https://example.com/post-1\",\n      \"content_html\": \"\u003cp\u003eFull article content...\u003c/p\u003e\",\n      \"date_published\": \"2024-03-15T10:00:00Z\"\n    }\n  ]\n}","content_type":"application/feed+json","format":"json"}`),
			},
			{
				Name:        "Convert to Atom",
				Description: "Convert any feed to Atom format",
				Input:       json.RawMessage(`{"feed":{"author":{"email":"news@example.com","name":"News Team"},"items":[{"categories":["urgent","world"],"description":"Important update","id":"news-1","link":"https://news.example.com/1","published":"2024-03-15T12:00:00Z","title":"Breaking News"}],"link":"https://news.example.com","title":"News Feed"},"include_content":false,"target_type":"atom"}`),
				Output:      json.RawMessage(`{"content":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cfeed xmlns=\"http://www.w3.org/2005/Atom\"\u003e...","content_type":"application/atom+xml","format":"atom"}`),
			},
			{
				Name:        "Convert to RSS",
				Description: "Convert modern formats to classic RSS",
				Input:       json.RawMessage(`{"feed":{"copyright":"© 2024 Example","items":[{"description":"Our first episode","enclosures":[{"length":15000000,"type":"audio/mpeg","url":"https://podcast.example.com/ep1.mp3"}],"id":"episode-1","link":"https://podcast.example.com/1","published":"2024-03-01T09:00:00Z","title":"Episode 1: Introduction"}],"language":"en-us","link":"https://podcast.example.com","title":"Podcast Feed"},"target_type":"rss"}`),
				Output:      json.RawMessage(`{"content":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003crss version=\"2.0\"\u003e...","content_type":"application/rss+xml","format":"rss"}`),
			},
			{
				Name:        "Pretty print JSON",
				Description: "Convert with human-readable formatting",
				Input:       json.RawMessage(`{"feed":{"items":[{"id":"1","title":"Item 1"}],"title":"Simple Feed"},"pretty":true,"target_type":"json"}`),
				Output:      json.RawMessage(`{"content":"{\n  \"version\": \"https://jsonfeed.org/version/1.1\",\n  \"title\": \"Simple Feed\",\n  \"items\": [\n    {\n      \"id\": \"1\",\n      \"title\": \"Item 1\"\n    }\n  ]\n}","content_type":"application/feed+json","format":"json"}`),
			},
			{
				Name:        "Convert with full content",
				Description: "Include complete article content",
				Input:       json.RawMessage(`{"feed":{"items":[{"content":"\u003carticle\u003e\u003cp\u003eThis is the complete article with multiple paragraphs...\u003c/p\u003e\u003c/article\u003e","description":"Summary only","id":"post-1","title":"Full Article"}],"title":"Blog"},"include_content":true,"target_type":"atom"}`),
				Output:      json.RawMessage(`{"content":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cfeed xmlns=\"http://www.w3.org/2005/Atom\"\u003e...","content_type":"application/atom+xml","format":"atom"}`),
			},
			{
				Name:        "Author preservation",
				Description: "Convert while maintaining author information",
				Input:       json.RawMessage(`{"feed":{"author":{"name":"Editorial Team"},"items":[{"author":{"email":"john@example.com","name":"John Smith"},"id":"1","title":"Post by John"}],"title":"Team Blog"},"target_type":"json"}`),
				Output:      json.RawMessage(`{"content":"{\"version\":\"https://jsonfeed.org/version/1.1\",...}","content_type":"application/feed+json","format":"json"}`),
			},
			{
				Name:        "Attachment conversion",
				Description: "Convert feeds with media attachments",
				Input:       json.RawMessage(`{"feed":{"items":[{"enclosures":[{"length":50000000,"type":"video/mp4","url":"https://example.com/video.mp4"}],"id":"video-1","title":"Tutorial Video"}],"title":"Video Feed"},"target_type":"json"}`),
				Output:      json.RawMessage(`{"content":"{...\"attachments\":[{\"url\":\"https://example.com/video.mp4\",\"mime_type\":\"video/mp4\",\"size_in_bytes\":50000000}]...}","content_type":"application/feed+json","format":"json"}`),
			},
			{
				Name:        "Date format handling",
				Description: "Convert with proper date formatting",
				Input:       json.RawMessage(`{"feed":{"items":[{"id":"event-1","published":"2024-03-20T09:00:00Z","title":"Upcoming Event","updated":"2024-03-21T10:00:00Z"}],"title":"Event Feed","updated":"2024-03-15T14:30:00Z"},"target_type":"rss"}`),
				Output:      json.RawMessage(`{"content":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003crss version=\"2.0\"\u003e...\u003cpubDate\u003eMon, 20 Mar 2024 09:00:00 +0000\u003c/pubDate\u003e...","content_type":"application/rss+xml","format":"rss"}`),
			},
		},
	},
	"feed_discover": {
		Name:            "feed_discover",
		Description:     "Automatically discover feed URLs from web pages with authentication support",
		Category:        "feed",
		Tags:            []string{"feed", "discover", "rss", "atom", "json", "auto-discovery", "web"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/feed",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The feed_discover tool automatically finds RSS, Atom, and JSON feed URLs from web pages:\n\nDiscovery Methods:\n1. HTML Link Tags:\n   - Searches for <link rel=\"alternate\"> tags\n   - Detects type attributes like application/rss+xml, application/atom+xml\n   - Extracts feed titles from link tags\n   - Resolves relative URLs to absolute\n\n2. Common Feed Paths:\n   - Checks standard feed locations like /feed, /rss, /atom.xml\n   - Verifies feed existence with HEAD requests\n   - Validates content types\n\n3. Auto-Discovery:\n   - Follows feed auto-discovery standards\n   - Supports RSS 2.0, Atom 1.0, and JSON Feed\n   - Handles multiple feeds per page\n\nAuthentication Support:\n- Automatic detection from state (api_key, bearer_token, etc.)\n- Manual auth configuration for protected sites\n- Support for API key, Bearer, Basic, OAuth2, and custom auth\n- Auth applied to both discovery and verification requests\n\nState Integration:\n- feed_discover_timeout: Default timeout in seconds\n- feed_discover_max_size: Default max response size\n- feed_discover_follow_redirects: Default redirect behavior\n- Authentication auto-detected from state keys\n\nCommon Use Cases:\n- Find all feeds on a blog or news site\n- Discover podcast feeds\n- Find JSON feeds for modern applications\n- Aggregate feeds from multiple sites\n- Verify feed availability before subscription",
		Examples: []Example{
			{
				Name:        "Basic feed discovery",
				Description: "Discover feeds from a blog homepage",
				Input:       json.RawMessage(`{"url":"https://blog.example.com"}`),
				Output:      json.RawMessage(`{"feeds":[{"source":"link_tag","title":"Example Blog RSS Feed","type":"rss","url":"https://blog.example.com/feed"},{"source":"link_tag","title":"Example Blog Atom Feed","type":"atom","url":"https://blog.example.com/atom.xml"}]}`),
			},
			{
				Name:        "Discovery with authentication",
				Description: "Discover feeds from a protected site",
				Input:       json.RawMessage(`{"auth":{"token":"your-access-token","type":"bearer"},"url":"https://private.example.com"}`),
				Output:      json.RawMessage(`{"feeds":[{"source":"link_tag","type":"json","url":"https://private.example.com/api/feed.json"}]}`),
			},
			{
				Name:        "Discovery with timeout",
				Description: "Set custom timeout for slow sites",
				Input:       json.RawMessage(`{"timeout":60,"url":"https://slow.example.com"}`),
				Output:      json.RawMessage(`{"feeds":[{"source":"common_path","type":"rss","url":"https://slow.example.com/rss"}]}`),
			},
			{
				Name:        "Multiple feed types",
				Description: "Discover various feed formats",
				Input:       json.RawMessage(`{"url":"https://news.example.com"}`),
				Output:      json.RawMessage(`{"feeds":[{"source":"link_tag","title":"News RSS 2.0","type":"rss","url":"https://news.example.com/rss.xml"},{"source":"link_tag","title":"News Atom 1.0","type":"atom","url":"https://news.example.com/feed.atom"},{"source":"link_tag","title":"News JSON Feed","type":"json","url":"https://news.example.com/feed.json"}]}`),
			},
			{
				Name:        "No redirects follow",
				Description: "Discover without following redirects",
				Input:       json.RawMessage(`{"follow_redirects":false,"url":"https://redirect.example.com"}`),
				Output:      json.RawMessage(`{"error":"HTTP error: 301 Moved Permanently","feeds":null}`),
			},
			{
				Name:        "Common path discovery",
				Description: "Find feeds via common URL patterns",
				Input:       json.RawMessage(`{"url":"https://simple.example.com"}`),
				Output:      json.RawMessage(`{"feeds":[{"source":"common_path","type":"rss","url":"https://simple.example.com/feed"},{"source":"common_path","type":"rss","url":"https://simple.example.com/rss"}]}`),
			},
			{
				Name:        "Custom headers",
				Description: "Include custom headers in discovery request",
				Input:       json.RawMessage(`{"headers":{"Accept":"text/html,application/xml","X-Client-ID":"my-app"},"url":"https://api.example.com"}`),
				Output:      json.RawMessage(`{"feeds":[{"source":"link_tag","type":"rss","url":"https://api.example.com/v1/feed"}]}`),
			},
			{
				Name:        "Size-limited discovery",
				Description: "Limit response size for large pages",
				Input:       json.RawMessage(`{"max_size":1048576,"url":"https://huge.example.com"}`),
				Output:      json.RawMessage(`{"feeds":[{"source":"link_tag","title":"Main Feed","type":"rss","url":"https://huge.example.com/feed.xml"}]}`),
			},
		},
	},
	"feed_extract": {
		Name:            "feed_extract",
		Description:     "Extract specific fields from feed items for structured data analysis",
		Category:        "feed",
		Tags:            []string{"feed", "extract", "transform", "data", "parsing", "analysis"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/feed",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The feed_extract tool provides selective field extraction from feed data:\n\nField Extraction:\n1. Basic Fields:\n   - id, title, description, content, link\n   - published, updated (formatted as RFC3339)\n   - categories (array of strings)\n\n2. Nested Fields:\n   - author.name, author.email, author.url\n   - Individual author fields or full author object\n\n3. Media Fields:\n   - enclosures (array of media attachments)\n   - Each enclosure contains url, type, length\n\nAdvanced Features:\n- Field Flattening: Convert author.name to author_name\n- Metadata Inclusion: Extract feed-level information\n- Item Limiting: Control number of items processed\n- State Integration: Default fields and limits from state\n\nState Integration:\n- feed_extract_max_items: Default maximum items\n- feed_extract_default_fields: Default field list\n\nCommon Use Cases:\n- Data transformation for analytics\n- Creating simplified feed summaries\n- Extracting specific content types\n- Preparing data for external systems\n- Content migration and archiving",
		Examples: []Example{
			{
				Name:        "Basic field extraction",
				Description: "Extract titles and links from feed items",
				Input:       json.RawMessage(`{"feed":{"items":[{"id":"post-1","link":"https://blog.example.com/post-1","title":"Latest Technology Trends"},{"id":"post-2","link":"https://blog.example.com/post-2","title":"AI Developments"}],"title":"Tech Blog"},"fields":["title","link"]}`),
				Output:      json.RawMessage(`{"count":2,"data":[{"link":"https://blog.example.com/post-1","title":"Latest Technology Trends"},{"link":"https://blog.example.com/post-2","title":"AI Developments"}],"fields":["title","link"]}`),
			},
			{
				Name:        "Extract with author information",
				Description: "Extract nested author fields",
				Input:       json.RawMessage(`{"feed":{"items":[{"author":{"email":"john@example.com","name":"John Doe"},"published":"2024-03-15T10:00:00Z","title":"Article by John"}]},"fields":["title","author.name","author.email","published"]}`),
				Output:      json.RawMessage(`{"count":1,"data":[{"author.email":"john@example.com","author.name":"John Doe","published":"2024-03-15T10:00:00Z","title":"Article by John"}],"fields":["title","author.name","author.email","published"]}`),
			},
			{
				Name:        "Flattened field extraction",
				Description: "Extract and flatten nested fields",
				Input:       json.RawMessage(`{"feed":{"items":[{"author":{"name":"Jane Smith","url":"https://jane.example.com"},"title":"Article with Author"}]},"fields":["title","author.name","author.url"],"flatten":true}`),
				Output:      json.RawMessage(`{"count":1,"data":[{"author_name":"Jane Smith","author_url":"https://jane.example.com","title":"Article with Author"}],"fields":["title","author.name","author.url"]}`),
			},
			{
				Name:        "Extract with feed metadata",
				Description: "Include feed-level information in results",
				Input:       json.RawMessage(`{"feed":{"description":"Latest news updates","items":[{"id":"news-1","title":"Breaking News"}],"language":"en","link":"https://news.example.com","title":"News Feed"},"fields":["title","id"],"include_metadata":true}`),
				Output:      json.RawMessage(`{"count":1,"data":[{"id":"news-1","title":"Breaking News"}],"fields":["title","id"],"metadata":{"description":"Latest news updates","language":"en","link":"https://news.example.com","title":"News Feed"}}`),
			},
			{
				Name:        "Limited item extraction",
				Description: "Extract from first N items only",
				Input:       json.RawMessage(`{"feed":{"items":[{"link":"link1","title":"Post 1"},{"link":"link2","title":"Post 2"},{"link":"link3","title":"Post 3"},{"link":"link4","title":"Post 4"}]},"fields":["title","link"],"max_items":2}`),
				Output:      json.RawMessage(`{"count":2,"data":[{"link":"link1","title":"Post 1"},{"link":"link2","title":"Post 2"}],"fields":["title","link"]}`),
			},
			{
				Name:        "Extract media enclosures",
				Description: "Extract podcast or media attachments",
				Input:       json.RawMessage(`{"feed":{"items":[{"enclosures":[{"length":25000000,"type":"audio/mpeg","url":"https://podcast.example.com/ep42.mp3"}],"title":"Episode 42"}]},"fields":["title","enclosures"]}`),
				Output:      json.RawMessage(`{"count":1,"data":[{"enclosures":[{"length":25000000,"type":"audio/mpeg","url":"https://podcast.example.com/ep42.mp3"}],"title":"Episode 42"}],"fields":["title","enclosures"]}`),
			},
			{
				Name:        "Categories and tags extraction",
				Description: "Extract taxonomies and content classification",
				Input:       json.RawMessage(`{"feed":{"items":[{"categories":["technology","programming","web"],"content":"Article about web development...","title":"Tech Article"}]},"fields":["title","categories","content"]}`),
				Output:      json.RawMessage(`{"count":1,"data":[{"categories":["technology","programming","web"],"content":"Article about web development...","title":"Tech Article"}],"fields":["title","categories","content"]}`),
			},
			{
				Name:        "Full author object extraction",
				Description: "Extract complete author information",
				Input:       json.RawMessage(`{"feed":{"items":[{"author":{"email":"sarah@university.edu","name":"Dr. Sarah Wilson","url":"https://university.edu/faculty/sarah"},"title":"Expert Opinion"}]},"fields":["title","author"]}`),
				Output:      json.RawMessage(`{"count":1,"data":[{"author":{"email":"sarah@university.edu","name":"Dr. Sarah Wilson","url":"https://university.edu/faculty/sarah"},"title":"Expert Opinion"}],"fields":["title","author"]}`),
			},
		},
	},
	"feed_fetch": {
		Name:            "feed_fetch",
		Description:     "Fetches and parses feeds in RSS, Atom, or JSON Feed format with authentication support",
		Category:        "feed",
		Tags:            []string{"feed", "rss", "atom", "json", "syndication", "news", "podcast"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/feed",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The feed_fetch tool retrieves and parses web feeds in various formats:\n\nFeed Formats Supported:\n1. RSS 2.0:\n   - Most common feed format\n   - XML-based with channel and item elements\n   - Supports enclosures for podcasts/media\n\n2. Atom:\n   - IETF standard feed format\n   - More structured than RSS\n   - Better date/time handling\n\n3. JSON Feed:\n   - Modern JSON-based format\n   - Easier to parse than XML\n   - Native support for content types\n\nUnified Output Format:\n- All feeds converted to consistent structure\n- Normalized field names across formats\n- Proper date/time parsing\n- Author information extraction\n- Media enclosure support\n\nAuthentication Support:\n- Automatic detection from state (api_key, bearer_token, etc.)\n- Manual auth configuration for protected feeds\n- Support for API key, Bearer, Basic, OAuth2, and custom auth\n- Works with subscription-based feeds\n\nConditional Requests:\n- ETag support for bandwidth efficiency\n- If-Modified-Since header support\n- Returns 304 Not Modified when unchanged\n- Preserves caching headers in response\n\nState Integration:\n- feed_fetch_default_timeout: Default timeout in seconds\n- feed_fetch_user_agent: Default User-Agent string\n- Authentication auto-detected from state keys\n\nCommon Use Cases:\n- News aggregation and monitoring\n- Podcast feed parsing\n- Blog post syndication\n- Content change detection\n- Feed validation and testing",
		Examples: []Example{
			{
				Name:        "Basic RSS fetch",
				Description: "Fetch a public RSS feed",
				Input:       json.RawMessage(`{"url":"https://example.com/rss"}`),
				Output:      json.RawMessage(`{"feed":{"description":"A blog about examples","items":[{"description":"This is the first post","id":"https://example.com/post1","link":"https://example.com/post1","published":"2024-03-15T10:00:00Z","title":"First Post"}],"link":"https://example.com","title":"Example Blog"},"format":"RSS2","status":200}`),
			},
			{
				Name:        "Fetch with authentication",
				Description: "Fetch a protected feed",
				Input:       json.RawMessage(`{"auth":{"token":"your-access-token","type":"bearer"},"url":"https://premium.example.com/feed"}`),
				Output:      json.RawMessage(`{"feed":{"items":[{"content":"Full premium content here...","id":"premium-1","title":"Exclusive Article"}],"title":"Premium Content Feed"},"format":"Atom","status":200}`),
			},
			{
				Name:        "Conditional fetch with ETag",
				Description: "Check if feed has changed",
				Input:       json.RawMessage(`{"etag":"W/\"123456789\"","url":"https://news.example.com/feed"}`),
				Output:      json.RawMessage(`{"headers":{"Cache-Control":"max-age=300","ETag":"W/\"123456789\""},"not_modified":true,"status":304}`),
			},
			{
				Name:        "Fetch with item limit",
				Description: "Get only recent items",
				Input:       json.RawMessage(`{"max_items":5,"url":"https://blog.example.com/feed"}`),
				Output:      json.RawMessage(`{"feed":{"items":[{"id":"1","title":"Latest Post"},{"id":"2","title":"Yesterday's Post"},{"id":"3","title":"Previous Post"},{"id":"4","title":"Older Post"},{"id":"5","title":"Fifth Post"}],"title":"Tech Blog"},"format":"RSS2","status":200}`),
			},
			{
				Name:        "JSON Feed fetch",
				Description: "Fetch a modern JSON feed",
				Input:       json.RawMessage(`{"url":"https://modern.example.com/feed.json"}`),
				Output:      json.RawMessage(`{"feed":{"author":{"name":"John Doe","url":"https://modern.example.com/about"},"description":"A blog using JSON Feed","items":[{"content":"Here's why JSON feeds are awesome...","id":"2024-03-15","tags":["json","feeds","web"],"title":"JSON Feeds are Great"}],"link":"https://modern.example.com","title":"Modern Blog"},"format":"JSONFeed","status":200}`),
			},
			{
				Name:        "Podcast feed with enclosures",
				Description: "Fetch podcast RSS with media files",
				Input:       json.RawMessage(`{"url":"https://podcast.example.com/rss"}`),
				Output:      json.RawMessage(`{"feed":{"items":[{"description":"Discussion about feed formats","enclosures":[{"length":25000000,"type":"audio/mpeg","url":"https://podcast.example.com/episodes/42.mp3"}],"id":"episode-42","title":"Episode 42: Feed Processing"}],"title":"Tech Podcast"},"format":"RSS2","status":200}`),
			},
			{
				Name:        "Custom headers",
				Description: "Fetch with custom HTTP headers",
				Input:       json.RawMessage(`{"headers":{"Accept":"application/rss+xml","X-API-Version":"2.0"},"url":"https://api.example.com/feed"}`),
				Output:      json.RawMessage(`{"feed":{"items":null,"title":"API Feed"},"format":"RSS2","status":200}`),
			},
			{
				Name:        "Timeout handling",
				Description: "Set custom timeout for slow feeds",
				Input:       json.RawMessage(`{"timeout":60,"url":"https://slow.example.com/feed"}`),
				Output:      json.RawMessage(`{"feed":{"items":null,"title":"Slow Feed"},"format":"Atom","status":200}`),
			},
		},
	},
	"feed_filter": {
		Name:            "feed_filter",
		Description:     "Filter feed items based on multiple criteria including keywords, dates, authors, and categories",
		Category:        "feed",
		Tags:            []string{"feed", "filter", "search", "query", "date", "keyword", "content"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/feed",
		ParameterSchema: json.RawMessage(`{"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "The feed_filter tool provides powerful filtering capabilities for feed data:\n\nFilter Types:\n1. Keyword Filtering:\n   - Searches in title, description, and content\n   - Case-insensitive matching\n   - Partial match support\n\n2. Date Range Filtering:\n   - Filter by published date (falls back to updated date)\n   - Supports after/before date ranges\n   - RFC3339 date format required\n\n3. Author Filtering:\n   - Matches author name field\n   - Case-insensitive partial matching\n   - Useful for finding posts by specific contributors\n\n4. Category Filtering:\n   - Matches against item categories/tags\n   - Case-insensitive partial matching\n   - Helps find topical content\n\nMatching Modes:\n- match_all=false (default): Items matching ANY criteria are included\n- match_all=true: Items must match ALL specified criteria\n- Date filters are always applied regardless of matching mode\n\nState Integration:\n- feed_filter_max_items: Default maximum items limit\n- feed_filter_match_all: Default matching mode\n\nCommon Use Cases:\n- Recent content: Filter by date range\n- Topic search: Filter by keywords and categories\n- Author archives: Filter by specific authors\n- Content curation: Combine multiple filters\n- Feed sampling: Use max_items to limit results",
		Examples: []Example{
			{
				Name:        "Filter by keywords",
				Description: "Find items containing specific keywords",
				Input:       json.RawMessage(`{"feed":{"items":[{"description":"How artificial intelligence is transforming medicine","published":"2024-03-15T10:00:00Z","title":"AI Revolution in Healthcare"},{"description":"Latest findings on global warming","published":"2024-03-14T10:00:00Z","title":"Climate Change Report"},{"content":"Deep dive into artificial intelligence companies","published":"2024-03-13T10:00:00Z","title":"Tech Stocks Analysis"}]},"keywords":["artificial intelligence","AI"]}`),
				Output:      json.RawMessage(`{"filtered_out":1,"items":[{"description":"How artificial intelligence is transforming medicine","published":"2024-03-15T10:00:00Z","title":"AI Revolution in Healthcare"},{"content":"Deep dive into artificial intelligence companies","published":"2024-03-13T10:00:00Z","title":"Tech Stocks Analysis"}],"total_items":3}`),
			},
			{
				Name:        "Filter by date range",
				Description: "Get items from the last week",
				Input:       json.RawMessage(`{"after":"2024-03-15T00:00:00Z","feed":{"items":[{"published":"2024-03-20T10:00:00Z","title":"Today's News"},{"published":"2024-03-10T10:00:00Z","title":"Last Week's Update"},{"published":"2024-01-01T10:00:00Z","title":"Old Article"}]}}`),
				Output:      json.RawMessage(`{"filtered_out":2,"items":[{"published":"2024-03-20T10:00:00Z","title":"Today's News"}],"total_items":3}`),
			},
			{
				Name:        "Filter by author",
				Description: "Find posts by specific authors",
				Input:       json.RawMessage(`{"authors":["John"],"feed":{"items":[{"author":{"name":"John Smith"},"title":"Post by John"},{"author":{"name":"Jane Doe"},"title":"Post by Jane"},{"author":{"name":"John Williams"},"title":"Another John Post"}]}}`),
				Output:      json.RawMessage(`{"filtered_out":1,"items":[{"author":{"name":"John Smith"},"title":"Post by John"},{"author":{"name":"John Williams"},"title":"Another John Post"}],"total_items":3}`),
			},
			{
				Name:        "Filter by categories",
				Description: "Find items in specific categories",
				Input:       json.RawMessage(`{"categories":["tech"],"feed":{"items":[{"categories":["technology","news"],"title":"Tech News"},{"categories":["sports","news"],"title":"Sports Update"},{"categories":["technology","tutorial"],"title":"Tech Tutorial"}]}}`),
				Output:      json.RawMessage(`{"filtered_out":1,"items":[{"categories":["technology","news"],"title":"Tech News"},{"categories":["technology","tutorial"],"title":"Tech Tutorial"}],"total_items":3}`),
			},
			{
				Name:        "Complex filter with match_all",
				Description: "Apply multiple filters with ALL matching",
				Input:       json.RawMessage(`{"after":"2024-03-01T00:00:00Z","authors":["John"],"categories":["tech"],"feed":{"items":[{"author":{"name":"John Smith"},"categories":["technology","ai"],"content":"Artificial intelligence applications","published":"2024-03-20T10:00:00Z","title":"AI in Tech by John"},{"author":{"name":"Jane Doe"},"categories":["news"],"content":"Latest AI developments","published":"2024-03-20T10:00:00Z","title":"AI News"},{"author":{"name":"John Smith"},"categories":["technology"],"content":"Technology trends","published":"2024-01-01T10:00:00Z","title":"Old Tech Post by John"}]},"keywords":["AI"],"match_all":true}`),
				Output:      json.RawMessage(`{"filtered_out":2,"items":[{"author":{"name":"John Smith"},"categories":["technology","ai"],"content":"Artificial intelligence applications","published":"2024-03-20T10:00:00Z","title":"AI in Tech by John"}],"total_items":3}`),
			},
			{
				Name:        "Date range with before and after",
				Description: "Filter items within a specific date range",
				Input:       json.RawMessage(`{"after":"2024-02-01T00:00:00Z","before":"2024-04-01T00:00:00Z","feed":{"items":[{"published":"2024-01-15T10:00:00Z","title":"January Post"},{"published":"2024-02-15T10:00:00Z","title":"February Post"},{"published":"2024-03-15T10:00:00Z","title":"March Post"},{"published":"2024-04-15T10:00:00Z","title":"April Post"}]}}`),
				Output:      json.RawMessage(`{"filtered_out":2,"items":[{"published":"2024-02-15T10:00:00Z","title":"February Post"},{"published":"2024-03-15T10:00:00Z","title":"March Post"}],"total_items":4}`),
			},
			{
				Name:        "Limited results",
				Description: "Filter with max_items limit",
				Input:       json.RawMessage(`{"categories":["news"],"feed":{"items":[{"categories":["news"],"title":"News 1"},{"categories":["news"],"title":"News 2"},{"categories":["news"],"title":"News 3"},{"categories":["news"],"title":"News 4"},{"categories":["news"],"title":"News 5"}]},"max_items":3}`),
				Output:      json.RawMessage(`{"filtered_out":0,"items":[{"categories":["news"],"title":"News 1"},{"categories":["news"],"title":"News 2"},{"categories":["news"],"title":"News 3"}],"total_items":5}`),
			},
			{
				Name:        "No date items handling",
				Description: "Handle items without dates gracefully",
				Input:       json.RawMessage(`{"after":"2024-03-14T00:00:00Z","feed":{"items":[{"published":"2024-03-15T10:00:00Z","title":"Dated Post"},{"title":"Undated Post"},{"published":"2024-03-16T10:00:00Z","title":"Another Dated"}]}}`),
				Output:      json.RawMessage(`{"filtered_out":1,"items":[{"published":"2024-03-15T10:00:00Z","title":"Dated Post"},{"published":"2024-03-16T10:00:00Z","title":"Another Dated"}],"total_items":3}`),
			},
		},
	},
	"file_delete": {
		Name:            "file_delete",
		Description:     "Safely deletes files and directories with confirmation options",
		Category:        "file",
		Tags:            []string{"filesystem", "delete", "remove", "cleanup"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/file",
		ParameterSchema: json.RawMessage(`{"properties":{"force":{"description":"Force deletion without safety checks (use with caution)","type":"boolean"},"path":{"description":"Path to the file or directory to delete","type":"string"},"recursive":{"description":"Delete directories and all their contents","type":"boolean"},"require_confirm":{"description":"Safety confirmation - must match the path being deleted","type":"string"}},"required":["path"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"deleted":{"description":"Whether the deletion was successful","type":"boolean"},"message":{"description":"Status message or reason for failure","type":"string"},"path":{"description":"Absolute path that was processed","type":"string"},"was_directory":{"description":"Whether the deleted item was a directory","type":"boolean"}},"required":["path","deleted","was_directory"],"type":"object"}`),
		UsageHint:       "Use this tool to safely delete files and directories with multiple confirmation options.\n\nIMPORTANT: This is a DESTRUCTIVE operation that permanently removes data.\n\nFeatures:\n- Multiple safety mechanisms to prevent accidental deletion\n- Support for both files and directories\n- Recursive directory deletion with safeguards\n- Critical system path protection\n- Confirmation requirements for dangerous operations\n- Path access control via state configuration\n\nParameters:\n- path: File or directory to delete (required)\n- force: Skip safety checks (dangerous!)\n- recursive: Delete directories and all contents\n- require_confirm: Must match the path for deletion to proceed\n\nSafety Mechanisms:\n1. Critical system paths are protected by default\n2. Non-empty directories require recursive=true\n3. Confirmation can be required via require_confirm\n4. State configuration can enforce confirmation\n5. Path restrictions via allowed/restricted lists\n\nConfirmation Requirements:\n- Set require_confirm to the exact path or filename\n- State can enforce confirmation via file_require_delete_confirmation\n- Non-empty directories need force=true or confirmation\n\nCritical Paths Protected:\n- Root directories (/, C:\\)\n- System directories (/bin, /etc, C:\\Windows)\n- User home directory\n- Program directories\n\nState Configuration:\n- file_restricted_paths: Array of paths that cannot be deleted\n- file_allowed_paths: Array of allowed path prefixes\n- file_require_delete_confirmation: Always require confirmation\n- file_use_trash: Prefer trash/recycle bin (note: not implemented)\n\nBest Practices:\n- Always use require_confirm for important deletions\n- Test with a dry run first (check path without deleting)\n- Use recursive=true only when necessary\n- Avoid force=true unless absolutely certain\n- Consider backups before deletion\n\nError Handling:\n- Non-existent paths return success with deleted=false\n- Permission errors are reported clearly\n- Directory not empty errors suggest recursive=true",
		Examples: []Example{
			{
				Name:        "Delete a simple file",
				Description: "Remove a temporary file",
				Input:       json.RawMessage(`{"path":"/tmp/temp_file.txt"}`),
				Output:      json.RawMessage(`{"deleted":true,"message":"File deleted successfully","path":"/tmp/temp_file.txt","was_directory":false}`),
			},
			{
				Name:        "Delete with confirmation",
				Description: "Delete important file with confirmation",
				Input:       json.RawMessage(`{"path":"/home/user/important.db","require_confirm":"important.db"}`),
				Output:      json.RawMessage(`{"deleted":true,"message":"File deleted successfully","path":"/home/user/important.db","was_directory":false}`),
			},
			{
				Name:        "Delete empty directory",
				Description: "Remove an empty directory",
				Input:       json.RawMessage(`{"path":"/tmp/empty_dir"}`),
				Output:      json.RawMessage(`{"deleted":true,"message":"Directory deleted successfully (0 items removed)","path":"/tmp/empty_dir","was_directory":true}`),
			},
			{
				Name:        "Delete directory with contents",
				Description: "Recursively delete directory and contents",
				Input:       json.RawMessage(`{"path":"/tmp/old_project","recursive":true,"require_confirm":"old_project"}`),
				Output:      json.RawMessage(`{"deleted":true,"message":"Directory deleted successfully (42 items removed)","path":"/tmp/old_project","was_directory":true}`),
			},
			{
				Name:        "Failed confirmation",
				Description: "Deletion blocked by wrong confirmation",
				Input:       json.RawMessage(`{"path":"/home/user/data.db","require_confirm":"wrong_name"}`),
				Output:      json.RawMessage(`{"deleted":false,"message":"Confirmation mismatch: expected '/home/user/data.db' or 'data.db', got 'wrong_name'","path":"/home/user/data.db","was_directory":false}`),
			},
			{
				Name:        "Non-empty directory without recursive",
				Description: "Attempt to delete non-empty directory",
				Input:       json.RawMessage(`{"path":"/tmp/full_dir"}`),
				Output:      json.RawMessage(`{"deleted":false,"message":"Directory is not empty (15 items). Use recursive=true to delete contents","path":"/tmp/full_dir","was_directory":true}`),
			},
			{
				Name:        "Critical path protection",
				Description: "Attempt to delete system directory",
				Input:       json.RawMessage(`{"path":"/etc"}`),
				Output:      json.RawMessage(`{"deleted":false,"message":"Cannot delete critical system directory. Use force=true to override (dangerous!)","path":"/etc","was_directory":true}`),
			},
		},
	},
	"file_list": {
		Name:            "file_list",
		Description:     "Lists files and directories with filtering options",
		Category:        "file",
		Tags:            []string{"filesystem", "directory", "list", "search"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/file",
		ParameterSchema: json.RawMessage(`{"properties":{"include_dirs":{"description":"Include directories in results","type":"boolean"},"include_files":{"description":"Include files in results (default: true)","type":"boolean"},"max_results":{"description":"Maximum number of results to return","type":"number"},"max_size":{"description":"Maximum file size in bytes","type":"number"},"min_size":{"description":"Minimum file size in bytes","type":"number"},"modified_after":{"description":"Only files modified after this time (RFC3339)","format":"date-time","type":"string"},"modified_before":{"description":"Only files modified before this time (RFC3339)","format":"date-time","type":"string"},"path":{"description":"Directory path to list","type":"string"},"pattern":{"description":"Glob pattern to match files (e.g., '*.txt', 'test_*')","type":"string"},"recursive":{"description":"Search subdirectories recursively","type":"boolean"},"sort_by":{"description":"Sort results by: name, size, or modified","type":"string"},"sort_reverse":{"description":"Reverse sort order","type":"boolean"}},"required":["path"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"files":{"description":"List of files and directories found","type":"array"},"filtered_out":{"description":"Number of items filtered out","type":"number"},"pattern":{"description":"Pattern used for filtering (if any)","type":"string"},"search_path":{"description":"Absolute path that was searched","type":"string"},"total_count":{"description":"Total number of items scanned","type":"number"}},"required":["files","total_count","filtered_out","search_path"],"type":"object"}`),
		UsageHint:       "Use this tool to list files and directories with extensive filtering options.\n\nFeatures:\n- Fast directory enumeration\n- Flexible pattern matching (glob patterns)\n- Recursive directory traversal\n- Size-based filtering (min/max)\n- Date-based filtering (modified before/after)\n- Multiple sort options\n- Hidden file control via state\n\nParameters:\n- path: Directory to list (required)\n- pattern: Glob pattern (e.g., *.txt, test_*, *.{jpg,png})\n- recursive: Search subdirectories (default: false)\n- include_dirs: Include directories in results (default: false)\n- include_files: Include files in results (default: true)\n- min_size/max_size: Filter by file size in bytes\n- modified_after/before: Filter by modification time (RFC3339)\n- sort_by: Sort by name, size, or modified (default: name)\n- sort_reverse: Reverse sort order\n- max_results: Limit number of results\n\nPattern Matching:\n- Supports standard glob patterns\n- * matches any sequence of characters\n- ? matches any single character\n- [abc] matches any character in brackets\n- [a-z] matches any character in range\n- {jpg,png} matches any of the alternatives\n\nSize Filtering:\n- Sizes are in bytes\n- min_size: 1048576 = 1MB\n- max_size: 10485760 = 10MB\n- Only applies to files, not directories\n\nDate Filtering:\n- Use RFC3339 format: 2024-01-15T10:30:00Z\n- Times are compared in UTC\n- modified_after: Include files modified after this time\n- modified_before: Include files modified before this time\n\nState Configuration:\n- file_list_show_hidden: Show hidden files (starting with .)\n- file_list_default_sort: Default sort field\n- file_list_max_results: Default max results\n- file_restricted_paths: Array of restricted paths\n- file_allowed_paths: Array of allowed path prefixes\n\nSorting:\n- name: Alphabetical by filename (case-insensitive)\n- size: By file size (smallest first)\n- modified: By modification time (oldest first)\n- Use sort_reverse: true to reverse order\n\nPerformance:\n- Non-recursive listing is very fast\n- Recursive searches may take time for large trees\n- Progress events emitted every 100 items\n- Context cancellation supported",
		Examples: []Example{
			{
				Name:        "List current directory",
				Description: "List all files in current directory",
				Input:       json.RawMessage(`{"path":"."}`),
				Output:      json.RawMessage(`{"files":[{"extension":"md","is_dir":false,"mode":"-rw-r--r--","modified_time":"2024-01-15T10:00:00Z","name":"README.md","path":"./README.md","size":1024},{"extension":"go","is_dir":false,"mode":"-rw-r--r--","modified_time":"2024-01-15T11:00:00Z","name":"main.go","path":"./main.go","size":2048},{"extension":"mod","is_dir":false,"mode":"-rw-r--r--","modified_time":"2024-01-15T09:00:00Z","name":"go.mod","path":"./go.mod","size":256}],"filtered_out":0,"search_path":"/home/user/project","total_count":3}`),
			},
			{
				Name:        "Find Go files recursively",
				Description: "Search for all Go source files",
				Input:       json.RawMessage(`{"path":".","pattern":"*.go","recursive":true}`),
				Output:      json.RawMessage(`{"files":[{"is_dir":false,"name":"main.go","path":"./main.go","size":2048},{"is_dir":false,"name":"utils.go","path":"./pkg/utils.go","size":1024},{"is_dir":false,"name":"test.go","path":"./test/test.go","size":512}],"filtered_out":7,"pattern":"*.go","search_path":"/home/user/project","total_count":10}`),
			},
			{
				Name:        "List large files",
				Description: "Find files larger than 10MB",
				Input:       json.RawMessage(`{"min_size":10485760,"path":"/home/user/downloads","recursive":true,"sort_by":"size","sort_reverse":true}`),
				Output:      json.RawMessage(`{"files":[{"name":"video.mp4","size":104857600},{"name":"backup.zip","size":52428800},{"name":"dataset.csv","size":20971520}],"filtered_out":47,"search_path":"/home/user/downloads","total_count":50}`),
			},
			{
				Name:        "Recent files",
				Description: "Find files modified in last 24 hours",
				Input:       json.RawMessage(`{"modified_after":"2024-01-14T10:30:00Z","path":".","recursive":true,"sort_by":"modified","sort_reverse":true}`),
				Output:      json.RawMessage(`{"files":[{"modified_time":"2024-01-15T15:30:00Z","name":"report.pdf"},{"modified_time":"2024-01-15T14:00:00Z","name":"data.json"},{"modified_time":"2024-01-15T12:00:00Z","name":"notes.txt"}],"filtered_out":97,"search_path":"/home/user/project","total_count":100}`),
			},
			{
				Name:        "List directories only",
				Description: "Show only subdirectories",
				Input:       json.RawMessage(`{"include_dirs":true,"include_files":false,"path":"."}`),
				Output:      json.RawMessage(`{"files":[{"is_dir":true,"name":"src","path":"./src","size":0},{"is_dir":true,"name":"test","path":"./test","size":0},{"is_dir":true,"name":"docs","path":"./docs","size":0}],"filtered_out":2,"search_path":"/home/user/project","total_count":5}`),
			},
			{
				Name:        "Image files by extension",
				Description: "Find all image files",
				Input:       json.RawMessage(`{"max_results":100,"path":"/home/user/pictures","pattern":"*.{jpg,jpeg,png,gif}","recursive":true}`),
				Output:      json.RawMessage(`{"files":[{"extension":"jpg","name":"photo1.jpg"},{"extension":"png","name":"screenshot.png"},{"extension":"gif","name":"animation.gif"}],"filtered_out":100,"pattern":"*.{jpg,jpeg,png,gif}","search_path":"/home/user/pictures","total_count":500}`),
			},
			{
				Name:        "Complex filter",
				Description: "Recent large Python files",
				Input:       json.RawMessage(`{"min_size":1024,"modified_after":"2024-01-01T00:00:00Z","path":".","pattern":"*.py","recursive":true,"sort_by":"size","sort_reverse":true}`),
				Output:      json.RawMessage(`{"files":[{"modified_time":"2024-01-10T10:00:00Z","name":"main.py","size":8192},{"modified_time":"2024-01-05T10:00:00Z","name":"utils.py","size":4096}],"filtered_out":48,"total_count":50}`),
			},
		},
	},
	"file_move": {
		Name:            "file_move",
		Description:     "Moves or renames files and directories",
		Category:        "file",
		Tags:            []string{"filesystem", "move", "rename", "transfer"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/file",
		ParameterSchema: json.RawMessage(`{"properties":{"create_dirs":{"description":"Create parent directories if they don't exist","type":"boolean"},"destination":{"description":"Destination path (can be a new name or directory)","type":"string"},"overwrite":{"description":"Overwrite existing destination file","type":"boolean"},"preserve_attrs":{"description":"Preserve file permissions and timestamps","type":"boolean"},"source":{"description":"Source file or directory path","type":"string"}},"required":["source","destination"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"destination":{"description":"Absolute destination path where file was moved","type":"string"},"message":{"description":"Status message or error description","type":"string"},"moved":{"description":"Whether the move operation succeeded","type":"boolean"},"source":{"description":"Absolute source path that was moved","type":"string"},"was_cross_device":{"description":"True if file was moved across filesystems","type":"boolean"},"was_rename":{"description":"True if operation was a rename in same directory","type":"boolean"}},"required":["source","destination","moved","was_rename","was_cross_device"],"type":"object"}`),
		UsageHint:       "Use this tool to move or rename files and directories safely.\n\nFeatures:\n- Atomic moves within same filesystem (instant)\n- Cross-device transfers (copy-then-delete)\n- Directory and file support\n- Overwrite protection with explicit flag\n- Parent directory creation\n- Attribute preservation\n- Event tracking for operation progress\n\nParameters:\n- source: Source file or directory path (required)\n- destination: Target path or directory (required)\n- overwrite: Allow overwriting existing files (optional, default false)\n- create_dirs: Create parent directories if needed (optional)\n- preserve_attrs: Keep file permissions and timestamps (optional)\n\nMove Operations:\n1. Rename: Same directory, different name\n2. Move: Different directory, same or different name\n3. Cross-device: Automatic copy-then-delete for different filesystems\n\nDestination Behavior:\n- If destination is a directory: moves source into it\n- If destination is a file path: renames/moves to that path\n- Parent directories must exist unless create_dirs is true\n\nSafety Features:\n- Won't overwrite without explicit permission\n- Checks for same source and destination\n- Validates paths before operation\n- Restricted path checking via state\n\nState Configuration:\n- file.restricted_paths: Array of paths to block\n- file.allow_overwrite: Default overwrite permission\n- file.prefer_copy_delete: Force copy-delete method\n\nCross-Device Moves:\n- Automatically detected when rename fails\n- Only supported for files, not directories\n- Preserves content, optionally preserves attributes\n- Atomic within filesystem limits\n\nEvents Emitted:\n- file_move.start: Operation beginning\n- file_move.checking_source: Validating source\n- file_move.checking_destination: Validating destination\n- file_move.moving: Starting move operation\n- file_move.copying: Cross-device copy in progress\n- file_move.completed: Operation finished\n\nBest Practices:\n- Always check if destination exists first\n- Use overwrite=true carefully\n- Enable preserve_attrs for important files\n- Create parent directories when organizing files\n- Consider using rename for same-directory operations",
		Examples: []Example{
			{
				Name:        "Simple rename",
				Description: "Rename a file in the same directory",
				Input:       json.RawMessage(`{"destination":"report.txt","source":"document.txt"}`),
				Output:      json.RawMessage(`{"destination":"/home/user/report.txt","message":"Successfully moved","moved":true,"source":"/home/user/document.txt","was_cross_device":false,"was_rename":true}`),
			},
			{
				Name:        "Move to directory",
				Description: "Move file to another directory",
				Input:       json.RawMessage(`{"destination":"/home/user/documents/","source":"/tmp/download.pdf"}`),
				Output:      json.RawMessage(`{"destination":"/home/user/documents/download.pdf","message":"Successfully moved (cross-device)","moved":true,"source":"/tmp/download.pdf","was_cross_device":true,"was_rename":false}`),
			},
			{
				Name:        "Move with new name",
				Description: "Move and rename in one operation",
				Input:       json.RawMessage(`{"create_dirs":true,"destination":"projects/final-report.txt","source":"temp/draft.txt"}`),
				Output:      json.RawMessage(`{"destination":"/home/user/projects/final-report.txt","message":"Successfully moved","moved":true,"source":"/home/user/temp/draft.txt","was_cross_device":false,"was_rename":false}`),
			},
			{
				Name:        "Overwrite existing file",
				Description: "Replace existing file with move",
				Input:       json.RawMessage(`{"destination":"config.json","overwrite":true,"source":"new-config.json"}`),
				Output:      json.RawMessage(`{"destination":"/app/config.json","message":"Successfully moved","moved":true,"source":"/app/new-config.json","was_cross_device":false,"was_rename":true}`),
			},
			{
				Name:        "Move directory",
				Description: "Relocate entire directory",
				Input:       json.RawMessage(`{"destination":"workspace/active-projects/","source":"old-location/project"}`),
				Output:      json.RawMessage(`{"destination":"/home/user/workspace/active-projects/project","message":"Successfully moved","moved":true,"source":"/home/user/old-location/project","was_cross_device":false,"was_rename":false}`),
			},
			{
				Name:        "Failed move - exists",
				Description: "Destination already exists",
				Input:       json.RawMessage(`{"destination":"existing.txt","source":"update.txt"}`),
				Output:      json.RawMessage(`{"destination":"/home/user/existing.txt","message":"Destination already exists. Use overwrite=true to replace","moved":false,"source":"/home/user/update.txt","was_cross_device":false,"was_rename":true}`),
			},
			{
				Name:        "Preserve attributes",
				Description: "Move with timestamp preservation",
				Input:       json.RawMessage(`{"destination":"/home/user/backups/","preserve_attrs":true,"source":"/mnt/backup/archive.tar"}`),
				Output:      json.RawMessage(`{"destination":"/home/user/backups/archive.tar","message":"Successfully moved (cross-device)","moved":true,"source":"/mnt/backup/archive.tar","was_cross_device":true,"was_rename":false}`),
			},
		},
	},
	"file_read": {
		Name:            "file_read",
		Description:     "Reads file contents with support for large files, line ranges, and metadata",
		Category:        "file",
		Tags:            []string{"file", "read", "filesystem", "text", "binary"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/file",
		ParameterSchema: json.RawMessage(`{"properties":{"include_meta":{"description":"Include file metadata in the response","type":"boolean"},"line_end":{"description":"Stop reading at this line number (inclusive)","type":"number"},"line_start":{"description":"Start reading from this line number (1-based)","type":"number"},"max_size":{"description":"Maximum bytes to read (0 = unlimited, default: 10MB)","type":"number"},"path":{"description":"The path to the file to read","type":"string"}},"required":["path"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"content":{"description":"The file content","type":"string"},"encoding":{"description":"Detected file encoding (utf-8 or binary)","type":"string"},"is_binary":{"description":"Whether the file is binary","type":"boolean"},"lines":{"description":"Number of lines read (for text files)","type":"number"},"metadata":{"description":"File metadata (if include_meta is true)","type":"object"},"warnings":{"description":"Any warnings generated during read","type":"array"}},"required":["content","encoding","is_binary"],"type":"object"}`),
		UsageHint:       "Use this tool to read file contents with advanced features.\n\nFeatures:\n- Automatic encoding detection (UTF-8 or binary)\n- Line range support for reading specific portions\n- File size limits to prevent memory issues\n- Metadata retrieval (size, permissions, timestamps)\n- Path access control via state configuration\n- Progress events for large file operations\n\nParameters:\n- path: File path to read (required)\n- max_size: Maximum bytes to read (optional, default 10MB or from state)\n- line_start: Start reading from this line (optional, 1-based)\n- line_end: Stop reading at this line (optional, inclusive)\n- include_meta: Include file metadata (optional, default false)\n\nLine Range Reading:\n- Use line_start/line_end for large log files\n- Lines are 1-based (first line is 1)\n- Only text files support line ranges\n- Binary files ignore line parameters\n\nState Configuration:\n- file_read_max_size: Default max size in bytes\n- file_restricted_paths: Array of paths to block\n- file_allowed_paths: Array of allowed path prefixes\n- file_preferred_encoding: Override encoding detection\n\nSecurity:\n- Path restrictions can be enforced via state\n- Symlinks are followed (be careful with access control)\n- Binary files are detected and marked\n\nPerformance:\n- Uses buffered reading for efficiency\n- Streams large files instead of loading all at once\n- Emits progress events during read\n- Context cancellation supported",
		Examples: []Example{
			{
				Name:        "Read text file",
				Description: "Read a simple text file",
				Input:       json.RawMessage(`{"path":"/home/user/config.json"}`),
				Output:      json.RawMessage(`{"content":"{\"api_key\": \"secret\", \"port\": 8080}","encoding":"utf-8","is_binary":false,"lines":1}`),
			},
			{
				Name:        "Read with metadata",
				Description: "Get file content and metadata",
				Input:       json.RawMessage(`{"include_meta":true,"path":"/var/log/app.log"}`),
				Output:      json.RawMessage(`{"content":"2024-01-15 10:00:00 INFO Starting application\n2024-01-15 10:00:01 INFO Connected to database","encoding":"utf-8","is_binary":false,"lines":2,"metadata":{"absolute_path":"/var/log/app.log","extension":".log","is_dir":false,"mod_time":"2024-01-15T10:00:01Z","mode":"-rw-r--r--","size":2048}}`),
			},
			{
				Name:        "Read specific lines",
				Description: "Read lines 100-150 from a large log file",
				Input:       json.RawMessage(`{"line_end":150,"line_start":100,"path":"/var/log/system.log"}`),
				Output:      json.RawMessage(`{"content":"[100 lines of log content from line 100 to 150]","encoding":"utf-8","is_binary":false,"lines":51}`),
			},
			{
				Name:        "Read with size limit",
				Description: "Read large file with size constraint",
				Input:       json.RawMessage(`{"max_size":1048576,"path":"/data/large_dataset.csv"}`),
				Output:      json.RawMessage(`{"content":"[First 1MB of CSV data]","encoding":"utf-8","is_binary":false,"lines":5000,"warnings":["File truncated at 1048576 bytes"]}`),
			},
			{
				Name:        "Binary file detection",
				Description: "Read a binary file",
				Input:       json.RawMessage(`{"path":"/usr/bin/ls"}`),
				Output:      json.RawMessage(`{"content":"[Binary content - may appear garbled]","encoding":"binary","is_binary":true}`),
			},
			{
				Name:        "Handle missing file",
				Description: "Attempt to read non-existent file",
				Input:       json.RawMessage(`{"path":"/tmp/nonexistent.txt"}`),
				Output:      json.RawMessage(`{"error":"error opening file: open /tmp/nonexistent.txt: no such file or directory"}`),
			},
			{
				Name:        "Path restriction",
				Description: "Blocked by security policy",
				Input:       json.RawMessage(`{"path":"/etc/shadow"}`),
				Output:      json.RawMessage(`{"error":"access denied: path /etc/shadow is restricted"}`),
			},
		},
	},
	"file_search": {
		Name:            "file_search",
		Description:     "Searches for patterns in file contents",
		Category:        "file",
		Tags:            []string{"filesystem", "search", "grep", "find", "pattern"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/file",
		ParameterSchema: json.RawMessage(`{"properties":{"case_sensitive":{"description":"Perform case-sensitive search","type":"boolean"},"context_lines":{"description":"Number of context lines before/after matches","type":"number"},"file_pattern":{"description":"File name pattern to filter (e.g., '*.txt')","type":"string"},"include_line_numbers":{"description":"Include line numbers in results","type":"boolean"},"is_regex":{"description":"Treat pattern as regular expression","type":"boolean"},"max_results":{"description":"Maximum number of matches to return","type":"number"},"path":{"description":"File or directory path to search","type":"string"},"pattern":{"description":"Search pattern (plain text or regex)","type":"string"},"recursive":{"description":"Search subdirectories recursively","type":"boolean"}},"required":["path","pattern"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"files_searched":{"description":"Number of files searched","type":"number"},"matches":{"description":"List of matches found","type":"array"},"pattern":{"description":"The search pattern used","type":"string"},"search_path":{"description":"The path that was searched","type":"string"},"total_matches":{"description":"Total number of matches found","type":"number"}},"required":["matches","total_matches","files_searched","pattern","search_path"],"type":"object"}`),
		UsageHint:       "Use this tool to search for text patterns within files, similar to grep.\n\nFeatures:\n- Plain text or regex pattern matching\n- Case-sensitive or case-insensitive search\n- File filtering by name patterns (glob)\n- Recursive directory searching\n- Context lines before/after matches\n- Binary file detection and skipping\n- Progress tracking for large searches\n\nParameters:\n- path: File or directory to search (required)\n- pattern: Search pattern (required)\n- file_pattern: Filter files by name (e.g., *.txt, *.go)\n- is_regex: Treat pattern as regular expression\n- case_sensitive: Enable case-sensitive matching\n- recursive: Search subdirectories\n- max_results: Limit number of matches (default: 1000)\n- context_lines: Show N lines before/after matches\n- include_line_numbers: Show line numbers (default: true)\n\nPattern Matching:\n- Plain text: Exact substring matching\n- Regex: Full regular expression support\n- Case-insensitive: Controlled by case_sensitive flag\n- Special regex chars: . * + ? ^ $ [] {} () | \\\n\nFile Filtering:\n- Use file_pattern for glob matching\n- Examples: *.txt, test_*, *.{js,ts}\n- Applied to filename only, not path\n\nContext Lines:\n- Shows surrounding lines for better understanding\n- context_before: Lines preceding the match\n- context_after: Lines following the match\n- Useful for understanding code context\n\nState Configuration:\n- file_access_restrictions: Restricted paths\n- file_search_max_results: Default result limit\n- file_search_case_sensitive: Default case sensitivity\n- file_search_encoding: Default file encoding\n\nPerformance:\n- Streams files to handle large files efficiently\n- Binary files automatically skipped\n- Progress reporting for directory searches\n- Cancellable via context\n\nEvents Emitted:\n- Tool call/result events\n- Progress events during search\n- file_search_complete with statistics\n- Error events for invalid patterns\n\nBest Practices:\n- Use file_pattern to narrow search scope\n- Enable recursive for project-wide searches\n- Use context_lines for code searches\n- Set reasonable max_results to avoid overload\n- Use regex for complex pattern matching",
		Examples: []Example{
			{
				Name:        "Simple text search",
				Description: "Find occurrences of a word",
				Input:       json.RawMessage(`{"path":"document.txt","pattern":"TODO"}`),
				Output:      json.RawMessage(`{"files_searched":1,"matches":[{"file":"/home/user/document.txt","line":"// TODO: Implement error handling","line_number":15,"match_end":7,"match_start":3}],"pattern":"TODO","search_path":"/home/user/document.txt","total_matches":1}`),
			},
			{
				Name:        "Recursive code search",
				Description: "Find function definitions in Go files",
				Input:       json.RawMessage(`{"file_pattern":"*.go","path":"src/","pattern":"func main","recursive":true}`),
				Output:      json.RawMessage(`{"files_searched":45,"matches":[{"file":"/project/src/cmd/app/main.go","line":"func main() {","line_number":10,"match_end":9,"match_start":0},{"file":"/project/src/examples/demo.go","line":"func main() {","line_number":8,"match_end":9,"match_start":0}],"pattern":"func main","search_path":"/project/src","total_matches":2}`),
			},
			{
				Name:        "Regex with context",
				Description: "Find error patterns with surrounding context",
				Input:       json.RawMessage(`{"context_lines":2,"is_regex":true,"path":"app.log","pattern":"ERROR.*database"}`),
				Output:      json.RawMessage(`{"files_searched":1,"matches":[{"context_after":["[2024-01-15 10:30:15] WARN: Retrying connection in 5s","[2024-01-15 10:30:20] INFO: Connection retry attempt 1"],"context_before":["[2024-01-15 10:30:14] INFO: Attempting database connection","[2024-01-15 10:30:14] DEBUG: Using connection string: ..."],"file":"/var/log/app.log","line":"[2024-01-15 10:30:15] ERROR: database connection failed","line_number":156,"match_end":38,"match_start":23}],"pattern":"ERROR.*database","search_path":"/var/log/app.log","total_matches":1}`),
			},
			{
				Name:        "Case-insensitive search",
				Description: "Find variables regardless of case",
				Input:       json.RawMessage(`{"case_sensitive":false,"path":"config.ini","pattern":"api_key"}`),
				Output:      json.RawMessage(`{"files_searched":1,"matches":[{"file":"/app/config.ini","line":"API_KEY=secret123","line_number":5,"match_end":7,"match_start":0},{"file":"/app/config.ini","line":"backup_api_key=secret456","line_number":12,"match_end":14,"match_start":7}],"pattern":"api_key","search_path":"/app/config.ini","total_matches":2}`),
			},
			{
				Name:        "Limited results",
				Description: "Search with result limit",
				Input:       json.RawMessage(`{"max_results":10,"path":"logs/","pattern":"INFO","recursive":true}`),
				Output:      json.RawMessage(`{"files_searched":3,"matches":null,"pattern":"INFO","search_path":"/app/logs","total_matches":10}`),
			},
			{
				Name:        "Multiple file types",
				Description: "Search specific file extensions",
				Input:       json.RawMessage(`{"file_pattern":"*.{md,txt,rst}","path":"docs/","pattern":"deprecated","recursive":true}`),
				Output:      json.RawMessage(`{"files_searched":15,"matches":[{"file":"/project/docs/api.md","line":"**Deprecated**: This endpoint will be removed in v2.0","line_number":45},{"file":"/project/docs/changelog.txt","line":"- Deprecated old authentication method","line_number":23}],"pattern":"deprecated","search_path":"/project/docs","total_matches":2}`),
			},
			{
				Name:        "Complex regex pattern",
				Description: "Extract email addresses",
				Input:       json.RawMessage(`{"is_regex":true,"path":"contacts.csv","pattern":"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"}`),
				Output:      json.RawMessage(`{"files_searched":1,"matches":[{"file":"/data/contacts.csv","line":"John Doe,john.doe@example.com,Marketing","line_number":3,"match_end":29,"match_start":9}],"pattern":"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}","search_path":"/data/contacts.csv","total_matches":1}`),
			},
		},
	},
	"file_write": {
		Name:            "file_write",
		Description:     "Writes content to files with atomic operations, append mode, and backup support",
		Category:        "file",
		Tags:            []string{"file", "write", "filesystem", "save", "create"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/file",
		ParameterSchema: json.RawMessage(`{"properties":{"append":{"description":"Append to existing file instead of overwriting","type":"boolean"},"atomic":{"description":"Use atomic write operation (safer for important files)","type":"boolean"},"backup":{"description":"Create backup of existing file before writing","type":"boolean"},"content":{"description":"The content to write to the file","type":"string"},"create_dirs":{"description":"Create parent directories if they don't exist","type":"boolean"},"mode":{"description":"File permissions in octal (default: 0644)","type":"number"},"path":{"description":"The path to the file to write","type":"string"}},"required":["path","content"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"absolute_path":{"description":"Absolute path to the written file","type":"string"},"backup_path":{"description":"Path to backup file if created","type":"string"},"bytes_written":{"description":"Number of bytes written","type":"number"},"file_existed":{"description":"Whether the file existed before writing","type":"boolean"},"mod_time":{"description":"Modification time after write","type":"string"},"success":{"description":"Whether the write operation succeeded","type":"boolean"}},"required":["success","bytes_written","absolute_path","file_existed","mod_time"],"type":"object"}`),
		UsageHint:       "Use this tool to write content to files with advanced features.\n\nFeatures:\n- Atomic write operations for data integrity\n- Append mode for adding to existing files\n- Automatic parent directory creation\n- File backup before overwriting\n- Path access control via state configuration\n- Progress events for operation tracking\n\nParameters:\n- path: File path to write (required)\n- content: Content to write (required)\n- mode: File permissions in octal (optional, default 0644)\n- append: Append to file instead of overwrite (optional)\n- create_dirs: Create parent directories if needed (optional)\n- atomic: Use atomic write operation (optional)\n- backup: Create backup of existing file (optional)\n\nAtomic Write:\n- Writes to temporary file first\n- Renames to target path on success\n- Prevents partial writes on failure\n- Recommended for critical files\n\nBackup Feature:\n- Creates timestamped backup before overwrite\n- Format: filename.backup-YYYYMMDD-HHMMSS.ext\n- Only backs up existing files\n- Can be auto-enabled via state\n\nState Configuration:\n- file_restricted_paths: Array of paths to block\n- file_allowed_paths: Array of allowed path prefixes\n- file_default_permissions: Default file mode\n- file_auto_backup: Enable automatic backups\n\nSecurity:\n- Path restrictions enforced via state\n- Parent directory creation requires explicit flag\n- Atomic writes prevent corruption\n- Proper permission setting\n\nPerformance:\n- Atomic writes may be slower for large files\n- Direct writes are fastest\n- Progress events emitted for operations\n- Context cancellation supported",
		Examples: []Example{
			{
				Name:        "Simple file write",
				Description: "Write text to a file",
				Input:       json.RawMessage(`{"content":"Meeting notes:\n- Discuss project timeline\n- Review budget","path":"/home/user/notes.txt"}`),
				Output:      json.RawMessage(`{"absolute_path":"/home/user/notes.txt","bytes_written":48,"file_existed":false,"mod_time":"2024-01-15T10:30:00Z","success":true}`),
			},
			{
				Name:        "Append to log file",
				Description: "Add entry to existing log",
				Input:       json.RawMessage(`{"append":true,"content":"[2024-01-15 10:30:00] User login successful\n","path":"app.log"}`),
				Output:      json.RawMessage(`{"absolute_path":"/current/dir/app.log","bytes_written":46,"file_existed":true,"mod_time":"2024-01-15T10:30:00Z","success":true}`),
			},
			{
				Name:        "Atomic write with backup",
				Description: "Safely update configuration file",
				Input:       json.RawMessage(`{"atomic":true,"backup":true,"content":"{\"version\": \"2.0\", \"port\": 8080, \"debug\": false}","path":"config.json"}`),
				Output:      json.RawMessage(`{"absolute_path":"/app/config.json","backup_path":"/app/config.backup-20240115-103000.json","bytes_written":48,"file_existed":true,"mod_time":"2024-01-15T10:30:00Z","success":true}`),
			},
			{
				Name:        "Create file with directories",
				Description: "Write file in non-existent directory",
				Input:       json.RawMessage(`{"content":"Date,Product,Amount\n2024-01-15,Widget,100.00\n","create_dirs":true,"path":"output/reports/2024/january/sales.csv"}`),
				Output:      json.RawMessage(`{"absolute_path":"/home/user/output/reports/2024/january/sales.csv","bytes_written":48,"file_existed":false,"mod_time":"2024-01-15T10:30:00Z","success":true}`),
			},
			{
				Name:        "Write with custom permissions",
				Description: "Create executable script",
				Input:       json.RawMessage(`{"content":"#!/bin/bash\necho 'Deploying application...'\n","mode":755,"path":"deploy.sh"}`),
				Output:      json.RawMessage(`{"absolute_path":"/home/user/deploy.sh","bytes_written":44,"file_existed":false,"mod_time":"2024-01-15T10:30:00Z","success":true}`),
			},
			{
				Name:        "Handle write errors",
				Description: "Attempt to write to read-only location",
				Input:       json.RawMessage(`{"content":"system config","path":"/etc/system.conf"}`),
				Output:      json.RawMessage(`{"error":"error writing file: open /etc/system.conf: permission denied"}`),
			},
			{
				Name:        "Path restriction",
				Description: "Blocked by security policy",
				Input:       json.RawMessage(`{"content":"malicious content","path":"/etc/passwd"}`),
				Output:      json.RawMessage(`{"error":"access denied: path /etc/passwd is restricted"}`),
			},
		},
	},
	"get_environment_variable": {
		Name:            "get_environment_variable",
		Description:     "Retrieves environment variables safely",
		Category:        "system",
		Tags:            []string{"environment", "config", "system", "variables"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/system",
		ParameterSchema: json.RawMessage(`{"properties":{"name":{"description":"Specific environment variable name to retrieve","type":"string"},"no_values":{"description":"Exclude values from results (default: false, meaning values are included)","type":"boolean"},"pattern":{"description":"Pattern to match variable names (e.g., 'GO_*', '*_PATH')","type":"string"},"sensitive":{"description":"Allow retrieval of potentially sensitive variables","type":"boolean"}},"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"count":{"description":"Number of variables found","type":"number"},"query":{"description":"The name or pattern that was searched","type":"string"},"variables":{"description":"List of environment variables matching the query","type":"array"}},"required":["variables","count"],"type":"object"}`),
		UsageHint:       "Use this tool to safely read environment variables from the system.\n\nSecurity Features:\n- Sensitive variables (containing KEY, SECRET, TOKEN, PASSWORD, etc.) are masked by default\n- Use 'sensitive: true' to see unmasked values when necessary\n- Add custom sensitive patterns via state: state.Set(\"sensitive_env_patterns\", []string{\"*PRIVATE*\"})\n\nParameters:\n- name: Retrieve a specific environment variable by exact name (optional)\n- pattern: Search for variables matching a pattern (optional)\n- no_values: Return only variable names without values (optional, default false)\n- sensitive: Allow unmasked retrieval of sensitive variables (optional, default false)\n\nPattern Matching:\n- Use * as wildcard: \"GO*\" matches all variables starting with GO\n- \"*_PATH\" matches all variables ending with _PATH\n- \"*API*\" matches all variables containing API\n- \"*\" or empty pattern returns all variables\n\nOutput:\n- variables: Array of found environment variables\n- count: Number of variables found\n- query: The search term used (name or pattern)\n\nSecurity Masking:\nSensitive values show only first 3 and last 3 characters:\n- Full value: \"sk-abc123def456ghi789\"\n- Masked: \"sk-...789\"",
		Examples: []Example{
			{
				Name:        "Get specific variable",
				Description: "Retrieve the HOME environment variable",
				Input:       json.RawMessage(`{"name":"HOME"}`),
				Output:      json.RawMessage(`{"count":1,"query":"HOME","variables":[{"name":"HOME","value":"/home/user"}]}`),
			},
			{
				Name:        "Find Go-related variables",
				Description: "List all environment variables starting with GO",
				Input:       json.RawMessage(`{"pattern":"GO*"}`),
				Output:      json.RawMessage(`{"count":3,"query":"GO*","variables":[{"name":"GOPATH","value":"/home/user/go"},{"name":"GOROOT","value":"/usr/local/go"},{"name":"GO111MODULE","value":"on"}]}`),
			},
			{
				Name:        "List PATH variables",
				Description: "Find all variables ending with PATH",
				Input:       json.RawMessage(`{"pattern":"*PATH"}`),
				Output:      json.RawMessage(`{"count":3,"query":"*PATH","variables":[{"name":"PATH","value":"/usr/bin:/bin:/usr/local/bin"},{"name":"GOPATH","value":"/home/user/go"},{"name":"PYTHONPATH","value":"/usr/lib/python3"}]}`),
			},
			{
				Name:        "List variable names only",
				Description: "Get all variable names without values",
				Input:       json.RawMessage(`{"no_values":true,"pattern":"*"}`),
				Output:      json.RawMessage(`{"count":3,"query":"*","variables":[{"name":"HOME"},{"name":"PATH"},{"name":"USER"}]}`),
			},
			{
				Name:        "Handle sensitive variables",
				Description: "Retrieve API key with masked value",
				Input:       json.RawMessage(`{"name":"OPENAI_API_KEY"}`),
				Output:      json.RawMessage(`{"count":1,"query":"OPENAI_API_KEY","variables":[{"masked":true,"name":"OPENAI_API_KEY","value":"sk-...789"}]}`),
			},
			{
				Name:        "Retrieve sensitive unmasked",
				Description: "Get API key value unmasked when needed",
				Input:       json.RawMessage(`{"name":"OPENAI_API_KEY","sensitive":true}`),
				Output:      json.RawMessage(`{"count":1,"query":"OPENAI_API_KEY","variables":[{"name":"OPENAI_API_KEY","value":"sk-abc123def456ghi789"}]}`),
			},
			{
				Name:        "Non-existent variable",
				Description: "Request a variable that doesn't exist",
				Input:       json.RawMessage(`{"name":"NONEXISTENT_VAR"}`),
				Output:      json.RawMessage(`{"count":0,"query":"NONEXISTENT_VAR","variables":null}`),
			},
		},
	},
	"get_system_info": {
		Name:            "get_system_info",
		Description:     "Retrieves comprehensive system information",
		Category:        "system",
		Tags:            []string{"system", "info", "os", "architecture", "resources"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/system",
		ParameterSchema: json.RawMessage(`{"properties":{"include_environment":{"description":"Include environment summary information","type":"boolean"},"include_memory":{"description":"Include memory statistics","type":"boolean"},"include_runtime":{"description":"Include Go runtime information","type":"boolean"}},"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"architecture":{"description":"System architecture (e.g., amd64, arm64)","type":"string"},"cpus":{"description":"Number of CPU cores","type":"number"},"environment":{"description":"Environment summary (if include_environment is true)","type":"object"},"hostname":{"description":"System hostname","type":"string"},"memory":{"description":"Memory statistics (if include_memory is true)","type":"object"},"os":{"description":"Operating system details","type":"object"},"runtime":{"description":"Go runtime information (if include_runtime is true)","type":"object"},"timestamp":{"description":"Timestamp when information was collected (RFC3339)","type":"string"}},"required":["os","architecture","cpus","timestamp"],"type":"object"}`),
		UsageHint:       "Use this tool to retrieve comprehensive information about the system.\n\nBy default, returns basic system information:\n- Operating system (name, platform, version if available)\n- Architecture (e.g., amd64, arm64)\n- Number of CPUs\n- Hostname\n- Timestamp\n\nOptional information can be included:\n- include_memory: Memory statistics (allocated, system, GC stats)\n- include_runtime: Go runtime information (version, goroutines, GOMAXPROCS)\n- include_environment: Environment summary (user, paths, env var count)\n\nParameters:\n- include_environment: Add environment summary (optional, default false)\n- include_memory: Add memory statistics (optional, default false)\n- include_runtime: Add Go runtime info (optional, default false)\n\nMemory statistics include:\n- alloc: Current memory allocated and in use\n- total_alloc: Total memory allocated since program start\n- sys: Memory obtained from the OS\n- num_gc: Number of garbage collection cycles\n\nRuntime information includes:\n- Go version and compiler\n- Number of logical CPUs\n- Current goroutine count\n- GOMAXPROCS setting\n\nEnvironment summary includes:\n- Current user and home directory\n- Working directory and temp directory\n- PATH directory count\n- Total environment variables\n- Go-specific paths (GOPATH, GOROOT)\n\nNote: You can set defaults via state:\n- state.Set(\"system_info_include_memory\", true)\n- state.Set(\"system_info_include_runtime\", true)\n- state.Set(\"system_info_include_environment\", true)",
		Examples: []Example{
			{
				Name:        "Basic system information",
				Description: "Get core system details",
				Output:      json.RawMessage(`{"architecture":"amd64","cpus":8,"hostname":"dev-machine","os":{"name":"linux","platform":"Linux"},"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "System with memory statistics",
				Description: "Include current memory usage",
				Input:       json.RawMessage(`{"include_memory":true}`),
				Output:      json.RawMessage(`{"architecture":"arm64","cpus":10,"memory":{"alloc":52428800,"num_gc":5,"sys":75497472,"total_alloc":104857600},"os":{"name":"darwin","platform":"macOS"},"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Full system information",
				Description: "Get all available system details",
				Input:       json.RawMessage(`{"include_environment":true,"include_memory":true,"include_runtime":true}`),
				Output:      json.RawMessage(`{"architecture":"amd64","cpus":16,"environment":{"gopath":"/home/appuser/go","goroot":"/usr/local/go","home":"/home/appuser","path_dirs":12,"temp_dir":"/tmp","total_env_vars":35,"user":"appuser","working_dir":"/app"},"hostname":"prod-server","memory":{"alloc":104857600,"num_gc":10,"sys":150994944,"total_alloc":209715200},"os":{"name":"linux","platform":"Linux","version":"Ubuntu 22.04.3 LTS"},"runtime":{"compiler":"gc","gomaxprocs":16,"num_cpu":16,"num_goroutine":42,"version":"go1.21.5"},"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Runtime monitoring",
				Description: "Check Go runtime statistics",
				Input:       json.RawMessage(`{"include_runtime":true}`),
				Output:      json.RawMessage(`{"architecture":"amd64","cpus":12,"hostname":"WIN-DEV","os":{"name":"windows","platform":"Windows"},"runtime":{"compiler":"gc","gomaxprocs":12,"num_cpu":12,"num_goroutine":156,"version":"go1.21.5"},"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Environment check",
				Description: "Verify environment configuration",
				Input:       json.RawMessage(`{"include_environment":true}`),
				Output:      json.RawMessage(`{"architecture":"arm64","cpus":8,"environment":{"gopath":"/Users/developer/go","goroot":"/opt/homebrew/opt/go/libexec","home":"/Users/developer","path_dirs":15,"temp_dir":"/var/folders/xx/yyyyyy/T","total_env_vars":52,"user":"developer","working_dir":"/Users/developer/projects"},"os":{"name":"darwin","platform":"macOS"},"timestamp":"2024-01-15T10:30:00Z"}`),
			},
		},
	},
	"http_request": {
		Name:            "http_request",
		Description:     "Makes HTTP requests with full method and authentication support",
		Category:        "web",
		Tags:            []string{"http", "api", "rest", "post", "put", "delete", "network"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/web",
		ParameterSchema: json.RawMessage(`{"properties":{"auth_key_location":{"description":"Where to place the API key (header or query)","type":"string"},"auth_key_name":{"description":"API key name","type":"string"},"auth_key_value":{"description":"API key value","type":"string"},"auth_password":{"description":"Password for basic auth","type":"string"},"auth_token":{"description":"Token for bearer auth","type":"string"},"auth_type":{"description":"Authentication type (basic, bearer, api_key)","type":"string"},"auth_username":{"description":"Username for basic auth","type":"string"},"body":{"description":"Request body content","type":"string"},"body_type":{"description":"Body content type (json, form, text, xml)","type":"string"},"follow_redirects":{"description":"Whether to follow redirects (default: true)","type":"boolean"},"headers":{"description":"HTTP headers to include in the request","type":"object"},"method":{"description":"HTTP method (GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS)","type":"string"},"query_params":{"description":"Query parameters to append to the URL","type":"object"},"timeout":{"description":"Request timeout in seconds (default: 30)","type":"number"},"url":{"description":"The URL to send the request to","format":"uri","type":"string"}},"required":["url"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"body":{"description":"Response body content","type":"string"},"content_length":{"description":"Response Content-Length in bytes","type":"number"},"content_type":{"description":"Response Content-Type header","type":"string"},"headers":{"description":"Response headers","type":"object"},"redirect_url":{"description":"Redirect Location header if present","type":"string"},"response_time_ms":{"description":"Response time in milliseconds","type":"number"},"status":{"description":"HTTP response status text","type":"string"},"status_code":{"description":"HTTP response status code","type":"number"}},"required":["status_code","status","headers","body"],"type":"object"}`),
		UsageHint:       "Use this tool to make HTTP requests with full control over method, headers, body, and authentication.\n\nSupported methods:\n- GET: Retrieve data\n- POST: Create new resources\n- PUT: Update existing resources\n- DELETE: Remove resources\n- PATCH: Partial updates\n- HEAD: Get headers only\n- OPTIONS: Get allowed methods\n\nAuthentication methods:\n- Basic: Username/password authentication\n- Bearer: Token-based authentication (JWT, OAuth)\n- API Key: Key in header or query parameter\n\nBody types:\n- json: application/json\n- form: application/x-www-form-urlencoded\n- xml: application/xml\n- text: text/plain\n- (default): application/octet-stream\n\nState configuration:\n- default_auth_type: Default authentication method\n- api_key: Default API key for api_key auth\n- bearer_token: Default token for bearer auth\n- user_agent: Custom User-Agent header\n- http_headers: Default headers as map[string]string\n\nThe tool will:\n- Automatically handle redirects (unless disabled)\n- Add query parameters to URL\n- Set appropriate Content-Type for body\n- Measure response time\n- Return comprehensive response information",
		Examples: []Example{
			{
				Name:        "Simple GET request",
				Description: "Basic data retrieval",
				Input:       json.RawMessage(`{"url":"https://api.example.com/users"}`),
				Output:      json.RawMessage(`{"body":"[{\"id\":1,\"name\":\"John\"},{\"id\":2,\"name\":\"Jane\"}]","content_type":"application/json","headers":{"Content-Type":"application/json"},"response_time_ms":125,"status":"200 OK","status_code":200}`),
			},
			{
				Name:        "POST with JSON body",
				Description: "Create a new resource",
				Input:       json.RawMessage(`{"body":"{\"name\":\"Alice\",\"email\":\"alice@example.com\"}","body_type":"json","method":"POST","url":"https://api.example.com/users"}`),
				Output:      json.RawMessage(`{"body":"{\"id\":3,\"name\":\"Alice\",\"email\":\"alice@example.com\"}","headers":{"Location":"https://api.example.com/users/3"},"response_time_ms":230,"status":"201 Created","status_code":201}`),
			},
			{
				Name:        "PUT with form data",
				Description: "Update resource with form encoding",
				Input:       json.RawMessage(`{"body":"name=Bob\u0026city=NYC\u0026age=30","body_type":"form","method":"PUT","url":"https://api.example.com/profile"}`),
				Output:      json.RawMessage(`{"body":"{\"message\":\"Profile updated\"}","response_time_ms":150,"status":"200 OK","status_code":200}`),
			},
			{
				Name:        "DELETE request",
				Description: "Remove a resource",
				Input:       json.RawMessage(`{"method":"DELETE","url":"https://api.example.com/users/123"}`),
				Output:      json.RawMessage(`{"body":"","response_time_ms":90,"status":"204 No Content","status_code":204}`),
			},
			{
				Name:        "Bearer token auth",
				Description: "Authenticated API request",
				Input:       json.RawMessage(`{"auth_token":"eyJhbGciOiJIUzI1NiIs...","auth_type":"bearer","url":"https://api.example.com/me"}`),
				Output:      json.RawMessage(`{"body":"{\"id\":42,\"username\":\"johndoe\"}","response_time_ms":100,"status_code":200}`),
			},
			{
				Name:        "Basic authentication",
				Description: "Username/password auth",
				Input:       json.RawMessage(`{"auth_password":"secret123","auth_type":"basic","auth_username":"admin","url":"https://api.example.com/admin"}`),
				Output:      json.RawMessage(`{"body":"{\"role\":\"admin\",\"permissions\":[\"read\",\"write\"]}","status_code":200}`),
			},
			{
				Name:        "API key in header",
				Description: "API key authentication",
				Input:       json.RawMessage(`{"auth_key_location":"header","auth_key_name":"X-API-Key","auth_key_value":"abc123xyz","auth_type":"api_key","url":"https://api.example.com/data"}`),
				Output:      json.RawMessage(`{"body":"{\"data\":[1,2,3,4,5]}","status_code":200}`),
			},
			{
				Name:        "Query parameters",
				Description: "Add URL parameters",
				Input:       json.RawMessage(`{"query_params":{"limit":"10","page":"2","q":"golang"},"url":"https://api.example.com/search"}`),
				Output:      json.RawMessage(`{"body":"{\"results\":[...],\"page\":2,\"total\":150}","status_code":200}`),
			},
			{
				Name:        "Custom headers",
				Description: "Add custom HTTP headers",
				Input:       json.RawMessage(`{"body":"{\"type\":\"query\"}","headers":{"Accept":"application/vnd.api+json","Cache-Control":"no-cache","X-Request-ID":"uuid-123"},"method":"POST","url":"https://api.example.com/v2/data"}`),
				Output:      json.RawMessage(`{"headers":{"X-Request-ID":"uuid-123"},"status_code":200}`),
			},
			{
				Name:        "Handle redirects",
				Description: "Control redirect behavior",
				Input:       json.RawMessage(`{"follow_redirects":false,"url":"http://example.com/old-path"}`),
				Output:      json.RawMessage(`{"headers":{"Location":"https://example.com/new-path"},"redirect_url":"https://example.com/new-path","status":"301 Moved Permanently","status_code":301}`),
			},
		},
	},
	"json_process": {
		Name:            "json_process",
		Description:     "Process JSON data: parse, query with JSONPath, or transform",
		Category:        "data",
		Tags:            []string{"data", "json", "parse", "query", "transform", "jsonpath"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/data",
		ParameterSchema: json.RawMessage(`{"properties":{"data":{"description":"The JSON data to process","type":"string"},"jsonpath":{"description":"JSONPath expression for query operation","type":"string"},"operation":{"description":"Operation to perform: parse, query, or transform","enum":["parse","query","transform"],"type":"string"},"transform":{"description":"Transformation type","enum":["extract_keys","extract_values","flatten","prettify","minify"],"type":"string"}},"required":["data","operation"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "Use this tool to process JSON data in various ways:\n\nParse Operation:\n- Validates JSON syntax and parses the data\n- Returns the parsed data structure and its type\n- Useful for checking if data is valid JSON\n\nQuery Operation (JSONPath):\n- Extract specific values using JSONPath expressions\n- Supports basic JSONPath syntax:\n  - $ or empty: Root object\n  - .field: Access object field\n  - [n]: Array index access\n  - .field[n]: Combination of field and array access\n  - Nested paths: $.users[0].address.city\n\nTransform Operations:\n- extract_keys: Get all keys from the JSON structure (includes nested paths)\n- extract_values: Get all leaf values from the JSON\n- flatten: Convert nested JSON to flat key-value pairs\n- prettify: Format JSON with indentation for readability\n- minify: Remove unnecessary whitespace for compact representation\n\nJSONPath Examples:\n- $.name: Get the 'name' field from root\n- $.users[0]: Get the first user from 'users' array\n- $.users[0].email: Get email of the first user\n- $.products[*].price: Get all product prices (Note: [*] not fully supported in basic implementation)\n\nFor complex JSONPath queries beyond basic field and array access, consider using the result of a parse operation and processing it further.",
		Examples: []Example{
			{
				Name:        "Parse and validate JSON",
				Description: "Check if a string is valid JSON and see its structure",
				Input:       json.RawMessage(`{"data":"{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}","operation":"parse"}`),
				Output:      json.RawMessage(`{"result":{"age":null,"city":"New York","name":"John"},"result_type":"map[string]interface {}"}`),
			},
			{
				Name:        "Query nested data with JSONPath",
				Description: "Extract specific values from complex JSON structures",
				Input:       json.RawMessage(`{"data":"{\"users\": [{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\"}]}","jsonpath":"users[0].email","operation":"query"}`),
				Output:      json.RawMessage(`{"result":"alice@example.com","result_type":"string"}`),
			},
			{
				Name:        "Extract all keys from JSON",
				Description: "Get a list of all keys including nested paths",
				Input:       json.RawMessage(`{"data":"{\"user\": {\"name\": \"John\", \"address\": {\"city\": \"NYC\", \"zip\": \"10001\"}}, \"active\": true}","operation":"transform","transform":"extract_keys"}`),
				Output:      json.RawMessage(`{"result":["user","user.name","user.address","user.address.city","user.address.zip","active"],"result_type":"[]string"}`),
			},
			{
				Name:        "Flatten nested JSON",
				Description: "Convert nested structure to flat key-value pairs",
				Input:       json.RawMessage(`{"data":"{\"user\": {\"name\": \"John\", \"scores\": [85, 90, 78]}, \"active\": true}","operation":"transform","transform":"flatten"}`),
				Output:      json.RawMessage(`{"result":{"active":true,"user.name":"John","user.scores[0]":null,"user.scores[1]":null,"user.scores[2]":null},"result_type":"map[string]interface {}"}`),
			},
			{
				Name:        "Pretty print JSON",
				Description: "Format JSON with proper indentation",
				Input:       json.RawMessage(`{"data":"{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}","operation":"transform","transform":"prettify"}`),
				Output:      json.RawMessage(`{"result":"{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}","result_type":"string"}`),
			},
			{
				Name:        "Handle invalid JSON gracefully",
				Description: "Error handling for malformed JSON",
				Input:       json.RawMessage(`{"data":"{\"name\": \"John\", \"age\": 30,}","operation":"parse"}`),
				Output:      json.RawMessage(`{"error":"invalid JSON: invalid character '}' after object key:value pair","result_type":""}`),
			},
			{
				Name:        "Query array elements",
				Description: "Access specific elements in JSON arrays",
				Input:       json.RawMessage(`{"data":"{\"items\": [\"apple\", \"banana\", \"cherry\"], \"count\": 3}","jsonpath":"items[1]","operation":"query"}`),
				Output:      json.RawMessage(`{"result":"banana","result_type":"string"}`),
			},
		},
	},
	"process_list": {
		Name:            "process_list",
		Description:     "Lists running processes with filtering and sorting",
		Category:        "system",
		Tags:            []string{"process", "system", "monitoring", "ps"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/system",
		ParameterSchema: json.RawMessage(`{"properties":{"filter":{"description":"Filter processes by name (case-insensitive contains)","type":"string"},"include_self":{"description":"Include the current process in results","type":"boolean"},"limit":{"description":"Maximum number of processes to return","type":"number"},"sort_by":{"description":"Sort results by: pid, name, cpu, memory","type":"string"}},"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"count":{"description":"Number of processes returned","type":"number"},"platform":{"description":"Operating system platform","type":"string"},"processes":{"description":"List of running processes","type":"array"},"timestamp":{"description":"Timestamp when the list was generated (RFC3339)","type":"string"}},"required":["processes","count","platform","timestamp"],"type":"object"}`),
		UsageHint:       "Use this tool to list and analyze running processes on the system.\n\nCross-Platform Support:\n- Unix/Linux/macOS: Uses 'ps aux' command for detailed process information\n- Windows: Uses 'tasklist' command (limited CPU info)\n- Other platforms: Returns minimal process information\n\nParameters:\n- filter: Search for processes by name (case-insensitive, partial match)\n- include_self: Include the current process (default: false)\n- sort_by: Order results by pid, name, cpu, or memory\n- limit: Maximum processes to return (1-1000)\n\nOutput Information:\n- pid: Process identifier\n- name: Process executable name\n- command: Full command line (Unix only)\n- cpu_percent: CPU usage percentage (Unix only)\n- memory_kb: Memory usage in kilobytes\n- user: Process owner\n- start_time: When process started\n\nFiltering:\n- Searches both process name and command line\n- Case-insensitive partial matching\n- Example: filter \"chrome\" matches \"Google Chrome Helper\"\n\nSorting:\n- pid: Ascending by process ID\n- name: Alphabetical by process name\n- cpu: Descending by CPU usage (highest first)\n- memory: Descending by memory usage (highest first)\n\nState Configuration:\nSet default limit via state:\nstate.Set(\"process_list_default_limit\", 50)\n\nPlatform Notes:\n- CPU percentage may be 0 on Windows\n- Command field may be empty on some platforms\n- Memory values are estimates on some systems",
		Examples: []Example{
			{
				Name:        "List all processes",
				Description: "Get a complete process list",
				Output:      json.RawMessage(`{"count":2,"platform":"darwin","processes":[{"command":"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome","cpu_percent":5.2,"memory_kb":524288,"name":"chrome","pid":1234,"start_time":"10:30AM","user":"john"},{"command":"/usr/local/bin/code","cpu_percent":2.1,"memory_kb":262144,"name":"code","pid":5678,"start_time":"09:15AM","user":"john"}],"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Find specific processes",
				Description: "Search for Chrome processes",
				Input:       json.RawMessage(`{"filter":"chrome"}`),
				Output:      json.RawMessage(`{"count":2,"platform":"linux","processes":[{"memory_kb":524288,"name":"chrome","pid":1234},{"memory_kb":8192,"name":"chrome_crashpad","pid":1235}],"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Top CPU consumers",
				Description: "Find processes using most CPU",
				Input:       json.RawMessage(`{"limit":5,"sort_by":"cpu"}`),
				Output:      json.RawMessage(`{"count":5,"platform":"darwin","processes":[{"cpu_percent":95.5,"name":"video_encoder","pid":9999},{"cpu_percent":45.2,"name":"chrome","pid":8888},{"cpu_percent":25,"name":"spotlight","pid":7777},{"cpu_percent":15.3,"name":"docker","pid":6666},{"cpu_percent":10.1,"name":"vscode","pid":5555}],"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Memory usage analysis",
				Description: "Find memory-hungry processes",
				Input:       json.RawMessage(`{"limit":10,"sort_by":"memory"}`),
				Output:      json.RawMessage(`{"count":3,"platform":"linux","processes":[{"memory_kb":2097152,"name":"docker","pid":1111},{"memory_kb":1048576,"name":"chrome","pid":2222},{"memory_kb":524288,"name":"slack","pid":3333}],"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Include current process",
				Description: "List processes including self",
				Input:       json.RawMessage(`{"filter":"go","include_self":true}`),
				Output:      json.RawMessage(`{"count":3,"platform":"linux","processes":[{"command":"go run main.go","name":"go","pid":12345},{"command":"gopls serve","name":"gopls","pid":12346},{"command":"./go-llms","name":"go-llms","pid":null}],"timestamp":"2024-01-15T10:30:00Z"}`),
			},
			{
				Name:        "Windows process list",
				Description: "List processes on Windows",
				Input:       json.RawMessage(`{"limit":3}`),
				Output:      json.RawMessage(`{"count":3,"platform":"windows","processes":[{"memory_kb":512000,"name":"chrome.exe","pid":1000,"user":"SYSTEM"},{"memory_kb":64000,"name":"svchost.exe","pid":2000,"user":"SYSTEM"},{"memory_kb":128000,"name":"explorer.exe","pid":3000,"user":"User"}],"timestamp":"2024-01-15T10:30:00Z"}`),
			},
		},
	},
	"web_fetch": {
		Name:            "web_fetch",
		Description:     "Fetches content from a URL with customizable timeout",
		Category:        "web",
		Tags:            []string{"http", "fetch", "download", "web", "network"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/web",
		ParameterSchema: json.RawMessage(`{"properties":{"auth_api_key":{"description":"API key value","type":"string"},"auth_header_name":{"description":"Custom header name for custom authentication","type":"string"},"auth_header_value":{"description":"Custom header value for custom authentication","type":"string"},"auth_key_location":{"description":"Where to place API key: 'header', 'query', or 'cookie' (default: header)","type":"string"},"auth_key_name":{"description":"API key parameter name (default: X-API-Key)","type":"string"},"auth_password":{"description":"Password for basic authentication","type":"string"},"auth_prefix":{"description":"Optional prefix for custom auth header value (e.g., 'Token')","type":"string"},"auth_token":{"description":"Bearer token or general authentication token","type":"string"},"auth_type":{"description":"Authentication type: 'bearer', 'basic', 'api_key', 'oauth2', 'custom'","type":"string"},"auth_username":{"description":"Username for basic authentication","type":"string"},"timeout":{"description":"Request timeout in seconds (default: 30)","type":"number"},"url":{"description":"The URL to fetch content from","format":"uri","type":"string"}},"required":["url"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"content":{"description":"The fetched content from the URL","type":"string"},"headers":{"description":"Response headers","type":"object"},"status_code":{"description":"HTTP status code of the response","type":"number"},"status_text":{"description":"HTTP status text (e.g., '200 OK')","type":"string"}},"required":["content","status_code","status_text"],"type":"object"}`),
		UsageHint:       "Use this tool to fetch content from a URL with optional authentication. The tool handles:\n- HTTP/HTTPS URLs\n- Customizable timeout (default 30 seconds)\n- Multiple authentication methods (bearer, basic, API key, OAuth2, custom)\n- Automatic content decoding\n- Header extraction\n- Proper error handling and status codes\n\nAuthentication methods:\n- bearer: Sends \"Authorization: Bearer <token>\" header\n- basic: Sends HTTP Basic Authentication with username/password\n- api_key: Sends API key in header, query, or cookie\n- oauth2: Sends OAuth2 access token as bearer token\n- custom: Sends custom header with optional prefix\n\nThe tool will follow redirects automatically and handle common web server responses.\nUser agent can be customized via state (user_agent key).\nAuthentication can be auto-detected from state or provided via parameters.",
		Examples: []Example{
			{
				Name:        "Fetch a web page",
				Description: "Basic web page retrieval",
				Input:       json.RawMessage(`{"url":"https://example.com"}`),
				Output:      json.RawMessage(`{"content":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\u003ctitle\u003eExample Domain\u003c/title\u003e...\u003c/html\u003e","headers":{"Content-Type":"text/html; charset=UTF-8"},"status_code":200,"status_text":"200 OK"}`),
			},
			{
				Name:        "Fetch API endpoint",
				Description: "Retrieve JSON from an API",
				Input:       json.RawMessage(`{"url":"https://api.github.com/users/octocat"}`),
				Output:      json.RawMessage(`{"content":"{\"login\":\"octocat\",\"id\":1,\"node_id\":\"MDQ6VXNlcjE=\",\"avatar_url\":\"https://github.com/images/error/octocat_happy.gif\"...}","headers":{"Content-Type":"application/json; charset=utf-8"},"status_code":200,"status_text":"200 OK"}`),
			},
			{
				Name:        "With custom timeout",
				Description: "Fetch with extended timeout",
				Input:       json.RawMessage(`{"timeout":120,"url":"https://slow-server.example.com/large-file"}`),
				Output:      json.RawMessage(`{"content":"[Large file content...]","status_code":200,"status_text":"200 OK"}`),
			},
			{
				Name:        "Handle 404 error",
				Description: "Non-existent page",
				Input:       json.RawMessage(`{"url":"https://example.com/does-not-exist"}`),
				Output:      json.RawMessage(`{"content":"404 page not found","status_code":404,"status_text":"404 Not Found"}`),
			},
			{
				Name:        "Handle redirect",
				Description: "Follow redirects automatically",
				Input:       json.RawMessage(`{"url":"http://github.com"}`),
				Output:      json.RawMessage(`{"content":"[GitHub homepage HTML...]","headers":{"Content-Type":"text/html; charset=utf-8"},"status_code":200,"status_text":"200 OK"}`),
			},
			{
				Name:        "Timeout error",
				Description: "Request times out",
				Input:       json.RawMessage(`{"timeout":5,"url":"https://very-slow-server.example.com"}`),
				Output:      json.RawMessage(`{"error":"request timeout after 5s"}`),
			},
			{
				Name:        "Bearer token authentication",
				Description: "Fetch with bearer token",
				Input:       json.RawMessage(`{"auth_token":"ghp_xxxxxxxxxxxxxxxxxxxx","auth_type":"bearer","url":"https://api.github.com/user"}`),
				Output:      json.RawMessage(`{"content":"{\"login\":\"username\",\"id\":12345,...}","status_code":200,"status_text":"200 OK"}`),
			},
			{
				Name:        "API key authentication",
				Description: "Fetch with API key in header",
				Input:       json.RawMessage(`{"auth_api_key":"abc123xyz","auth_key_name":"X-API-Key","auth_type":"api_key","url":"https://api.example.com/data"}`),
				Output:      json.RawMessage(`{"content":"{\"data\":[1,2,3]}","status_code":200,"status_text":"200 OK"}`),
			},
			{
				Name:        "Basic authentication",
				Description: "Fetch with username/password",
				Input:       json.RawMessage(`{"auth_password":"pass","auth_type":"basic","auth_username":"user","url":"https://api.example.com/protected"}`),
				Output:      json.RawMessage(`{"content":"{\"message\":\"authenticated\"}","status_code":200,"status_text":"200 OK"}`),
			},
			{
				Name:        "Invalid URL",
				Description: "Malformed URL",
				Input:       json.RawMessage(`{"url":"not-a-valid-url"}`),
				Output:      json.RawMessage(`{"error":"invalid URL: not-a-valid-url"}`),
			},
		},
	},
	"web_scrape": {
		Name:            "web_scrape",
		Description:     "Extracts structured data from HTML pages",
		Category:        "web",
		Tags:            []string{"scrape", "html", "extract", "parse", "web", "network"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/web",
		ParameterSchema: json.RawMessage(`{"properties":{"auth_api_key":{"description":"API key value","type":"string"},"auth_header_name":{"description":"Custom header name for custom authentication","type":"string"},"auth_header_value":{"description":"Custom header value for custom authentication","type":"string"},"auth_key_location":{"description":"Where to place API key: 'header', 'query', or 'cookie' (default: header)","type":"string"},"auth_key_name":{"description":"API key parameter name (default: X-API-Key)","type":"string"},"auth_password":{"description":"Password for basic authentication","type":"string"},"auth_prefix":{"description":"Optional prefix for custom auth header value (e.g., 'Token')","type":"string"},"auth_token":{"description":"Bearer token or general authentication token","type":"string"},"auth_type":{"description":"Authentication type: 'bearer', 'basic', 'api_key', 'oauth2', 'custom'","type":"string"},"auth_username":{"description":"Username for basic authentication","type":"string"},"extract_links":{"description":"Extract all links from the page (default: true)","type":"boolean"},"extract_meta":{"description":"Extract metadata (title, description, keywords) (default: true)","type":"boolean"},"extract_text":{"description":"Extract all text content from the page (default: true)","type":"boolean"},"max_depth":{"description":"Maximum depth for following links (0 = current page only, default: 0)","type":"number"},"selectors":{"description":"CSS-like selectors to extract specific elements (simplified)","type":"array"},"timeout":{"description":"Request timeout in seconds (default: 30)","type":"number"},"url":{"description":"The URL to scrape","format":"uri","type":"string"}},"required":["url"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"content_type":{"description":"Content-Type header value","type":"string"},"links":{"description":"Links found on the page","type":"array"},"metadata":{"description":"Page metadata (description, keywords, etc.)","type":"object"},"selectors":{"description":"Content extracted by CSS selectors","type":"object"},"status_code":{"description":"HTTP status code","type":"number"},"text":{"description":"Text content extracted from the page","type":"string"},"timestamp":{"description":"ISO 8601 timestamp of when the page was scraped","type":"string"},"title":{"description":"Page title extracted from HTML","type":"string"},"url":{"description":"The URL that was scraped","type":"string"}},"required":["url","status_code","content_type","timestamp"],"type":"object"}`),
		UsageHint:       "Use this tool to extract structured data from HTML pages with optional authentication. The tool handles:\n- HTML parsing and content extraction\n- CSS-like selector support (basic tag names)\n- Link discovery and classification\n- Metadata extraction (title, description, keywords)\n- Text content cleaning\n- Configurable timeout\n- Multiple authentication methods (bearer, basic, API key, OAuth2, custom)\n\nFeatures:\n- extract_text: Get all text content with HTML tags removed\n- extract_links: Find all links with type classification (internal/external/anchor)\n- extract_meta: Extract metadata from meta tags\n- selectors: Extract content matching specific CSS-like selectors (currently supports tag names)\n\nAuthentication methods:\n- bearer: Sends \"Authorization: Bearer <token>\" header\n- basic: Sends HTTP Basic Authentication with username/password\n- api_key: Sends API key in header, query, or cookie\n- oauth2: Sends OAuth2 access token as bearer token\n- custom: Sends custom header with optional prefix\n\nThe tool will:\n- Automatically detect content type\n- Clean and format extracted text\n- Resolve relative URLs to absolute\n- Handle common HTML entities\n- Filter out script and style content\n\nState configuration:\n- user_agent: Custom user agent string\n- http_headers: Additional headers as map[string]string\n- scrape_selectors: Additional selectors to extract\n- respect_robots_txt: Enable robots.txt compliance (future feature)\n- Authentication can be auto-detected from state or provided via parameters",
		Examples: []Example{
			{
				Name:        "Basic web scraping",
				Description: "Extract all content from a webpage",
				Input:       json.RawMessage(`{"url":"https://example.com"}`),
				Output:      json.RawMessage(`{"content_type":"text/html; charset=UTF-8","links":[{"text":"More information...","type":"external","url":"https://www.iana.org/domains/example"}],"metadata":{"description":"Example domain for documentation"},"status_code":200,"text":"Example Domain This domain is for use in illustrative examples...","timestamp":"2024-01-15T10:00:00Z","title":"Example Domain","url":"https://example.com"}`),
			},
			{
				Name:        "Extract specific elements",
				Description: "Use selectors to extract specific content",
				Input:       json.RawMessage(`{"selectors":["h1","h2","p"],"url":"https://news.example.com"}`),
				Output:      json.RawMessage(`{"selectors":{"h1":["Breaking News","Top Stories"],"h2":["Technology","Business","Sports"],"p":["First paragraph...","Second paragraph..."]},"status_code":200,"timestamp":"2024-01-15T10:00:00Z","url":"https://news.example.com"}`),
			},
			{
				Name:        "Extract only links",
				Description: "Get all links from a page",
				Input:       json.RawMessage(`{"extract_links":true,"extract_meta":false,"extract_text":false,"url":"https://blog.example.com"}`),
				Output:      json.RawMessage(`{"links":[{"text":"First Post","type":"internal","url":"https://blog.example.com/post1"},{"text":"Second Post","type":"internal","url":"https://blog.example.com/post2"},{"text":"Follow us","type":"external","url":"https://twitter.com/blog"},{"text":"Comments","type":"anchor","url":"#comments"}],"status_code":200,"timestamp":"2024-01-15T10:00:00Z","url":"https://blog.example.com"}`),
			},
			{
				Name:        "Extract metadata only",
				Description: "Get page metadata without content",
				Input:       json.RawMessage(`{"extract_links":false,"extract_meta":true,"extract_text":false,"url":"https://shop.example.com/product"}`),
				Output:      json.RawMessage(`{"metadata":{"description":"Buy the amazing product for only $99","keywords":"product, amazing, shop","og:description":"The best product you'll ever buy","og:image":"https://shop.example.com/images/product.jpg","og:title":"Amazing Product"},"status_code":200,"timestamp":"2024-01-15T10:00:00Z","title":"Amazing Product - Shop Example","url":"https://shop.example.com/product"}`),
			},
			{
				Name:        "Scrape with timeout",
				Description: "Set custom timeout for slow sites",
				Input:       json.RawMessage(`{"timeout":60,"url":"https://slow-site.example.com"}`),
				Output:      json.RawMessage(`{"status_code":200,"text":"Content that took a while to load...","timestamp":"2024-01-15T10:00:00Z","url":"https://slow-site.example.com"}`),
			},
			{
				Name:        "Handle non-HTML content",
				Description: "Attempt to scrape non-HTML",
				Input:       json.RawMessage(`{"url":"https://api.example.com/data.json"}`),
				Output:      json.RawMessage(`{"error":"content type 'application/json' is not HTML/XML"}`),
			},
			{
				Name:        "Complex selector extraction",
				Description: "Extract multiple tag types",
				Input:       json.RawMessage(`{"extract_text":true,"max_depth":0,"selectors":["h1","h2","h3","code","pre"],"url":"https://docs.example.com"}`),
				Output:      json.RawMessage(`{"selectors":{"code":["npm install","const api = new API()"],"h1":["API Documentation"],"h2":["Getting Started","Authentication","Endpoints"],"h3":["Installation","Configuration","Examples"],"pre":["{ \"status\": \"ok\" }"]},"status_code":200,"text":"Full text content of the documentation page...","timestamp":"2024-01-15T10:00:00Z","url":"https://docs.example.com"}`),
			},
			{
				Name:        "Bearer token authentication",
				Description: "Scrape protected page with bearer token",
				Input:       json.RawMessage(`{"auth_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...","auth_type":"bearer","url":"https://private.example.com/protected-page"}`),
				Output:      json.RawMessage(`{"status_code":200,"text":"This is protected content only visible to authenticated users...","timestamp":"2024-01-15T10:00:00Z","title":"Protected Content","url":"https://private.example.com/protected-page"}`),
			},
			{
				Name:        "API key authentication",
				Description: "Scrape with API key in header",
				Input:       json.RawMessage(`{"auth_api_key":"abc123xyz789","auth_key_name":"X-API-Key","auth_type":"api_key","url":"https://api-docs.example.com/documentation"}`),
				Output:      json.RawMessage(`{"status_code":200,"text":"Welcome to our API documentation...","timestamp":"2024-01-15T10:00:00Z","title":"API Documentation","url":"https://api-docs.example.com/documentation"}`),
			},
			{
				Name:        "Basic authentication",
				Description: "Scrape with username/password",
				Input:       json.RawMessage(`{"auth_password":"secret123","auth_type":"basic","auth_username":"admin","url":"https://secure.example.com/admin"}`),
				Output:      json.RawMessage(`{"status_code":200,"text":"Admin control panel content...","timestamp":"2024-01-15T10:00:00Z","title":"Admin Dashboard","url":"https://secure.example.com/admin"}`),
			},
		},
	},
	"web_search": {
		Name:            "web_search",
		Description:     "Performs web searches using various search engines (DuckDuckGo, Brave, Tavily, Serpapi, Serper.dev)",
		Category:        "web",
		Tags:            []string{"search", "web", "query", "internet", "network", "brave", "tavily", "duckduckgo", "serpapi", "serperdev", "google"},
		Version:         "2.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/web",
		ParameterSchema: json.RawMessage(`{"properties":{"auth_api_key":{"description":"API key value","type":"string"},"auth_header_name":{"description":"Custom header name for custom authentication","type":"string"},"auth_header_value":{"description":"Custom header value for custom authentication","type":"string"},"auth_key_location":{"description":"Where to place API key: 'header', 'query', or 'cookie' (default: header)","type":"string"},"auth_key_name":{"description":"API key parameter name (default: X-API-Key)","type":"string"},"auth_password":{"description":"Password for basic authentication","type":"string"},"auth_prefix":{"description":"Optional prefix for custom auth header value (e.g., 'Token')","type":"string"},"auth_token":{"description":"Bearer token or general authentication token","type":"string"},"auth_type":{"description":"Authentication type: 'bearer', 'basic', 'api_key', 'oauth2', 'custom'","type":"string"},"auth_username":{"description":"Username for basic authentication","type":"string"},"engine":{"description":"Search engine to use (duckduckgo, brave, tavily, serpapi, serperdev, searx, or custom)","type":"string"},"engine_api_key":{"description":"Optional API key for the search engine (overrides environment variables)","type":"string"},"max_results":{"description":"Maximum number of results to return (default: 10, max: 50)","type":"number"},"query":{"description":"The search query","type":"string"},"safe_search":{"description":"Enable safe search filtering (default: true)","type":"boolean"},"timeout":{"description":"Request timeout in seconds (default: 30)","type":"number"}},"required":["query"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"properties":{"engine":{"description":"The search engine that was used","type":"string"},"query":{"description":"The search query that was executed","type":"string"},"results":{"description":"Array of search results","type":"array"},"time_ms":{"description":"Search execution time in milliseconds","type":"number"},"total_found":{"description":"Total number of results found","type":"number"}},"required":["query","engine","results"],"type":"object"}`),
		UsageHint:       "Use this tool to search the web using various search engines with optional authentication. The tool automatically selects the best available search engine based on API keys.\n\nAvailable engines:\n- duckduckgo: Free, no API key required, limited results\n- brave: Comprehensive web search (requires BRAVE_API_KEY)\n- tavily: AI-optimized search with summaries (requires TAVILY_API_KEY) - best for LLM applications\n- serpapi: Google search results (requires SERPAPI_API_KEY)\n- serperdev: Fast Google search results (requires SERPERDEV_API_KEY)\n- searx: Privacy-focused metasearch (requires searx_url in state)\n\nThe tool will automatically:\n- Select the best available engine based on API keys\n- Handle rate limiting and retries\n- Filter results based on safe search settings\n- Limit results to the requested maximum (up to 50)\n\nAPI Key Management:\n- Set API keys via environment variables (BRAVE_API_KEY, TAVILY_API_KEY, etc.)\n- Or provide engine_api_key parameter to override environment variables\n- Keys in state (search_api_key) also work for backward compatibility\n\nAuthentication methods (for custom search endpoints):\n- bearer: Sends \"Authorization: Bearer <token>\" header\n- basic: Sends HTTP Basic Authentication with username/password\n- api_key: Sends API key in header, query, or cookie\n- oauth2: Sends OAuth2 access token as bearer token\n- custom: Sends custom header with optional prefix\n\nAuthentication can be auto-detected from state or provided via parameters.",
		Examples: []Example{
			{
				Name:        "Basic web search",
				Description: "Search for information using default engine",
				Input:       json.RawMessage(`{"query":"latest AI developments 2024"}`),
				Output:      json.RawMessage(`{"engine":"tavily","query":"latest AI developments 2024","results":[{"description":"Overview of significant AI advancements...","snippet":"In 2024, artificial intelligence saw unprecedented growth...","title":"Major AI Breakthroughs in 2024","url":"https://example.com/ai-2024"}],"time_ms":342,"total_found":10}`),
			},
			{
				Name:        "Search with specific engine",
				Description: "Use a specific search engine",
				Input:       json.RawMessage(`{"engine":"brave","max_results":5,"query":"python programming tutorials"}`),
				Output:      json.RawMessage(`{"engine":"brave","query":"python programming tutorials","results":[{"description":"Well organized and easy to understand Web building tutorials","title":"Python Tutorial - W3Schools","url":"https://www.w3schools.com/python/"}],"time_ms":215,"total_found":5}`),
			},
			{
				Name:        "Search with API key override",
				Description: "Provide API key directly",
				Input:       json.RawMessage(`{"engine":"serpapi","engine_api_key":"your-serpapi-key-here","max_results":20,"query":"climate change research papers"}`),
				Output:      json.RawMessage(`{"engine":"serpapi","query":"climate change research papers","time_ms":523,"total_found":20}`),
			},
			{
				Name:        "Search with safe search disabled",
				Description: "Search without content filtering",
				Input:       json.RawMessage(`{"query":"medical procedures","safe_search":false}`),
				Output:      json.RawMessage(`{"engine":"duckduckgo","query":"medical procedures","time_ms":189,"total_found":10}`),
			},
			{
				Name:        "Handle missing API keys",
				Description: "Fallback to free engine",
				Input:       json.RawMessage(`{"query":"open source projects"}`),
				Output:      json.RawMessage(`{"engine":"duckduckgo","query":"open source projects","time_ms":412,"total_found":8}`),
			},
			{
				Name:        "Search with custom timeout",
				Description: "Set longer timeout for slow connections",
				Input:       json.RawMessage(`{"query":"comprehensive market analysis reports 2024","timeout":60}`),
				Output:      json.RawMessage(`{"engine":"tavily","query":"comprehensive market analysis reports 2024","time_ms":2341,"total_found":15}`),
			},
			{
				Name:        "Error: Invalid engine",
				Description: "Handle unsupported engine",
				Input:       json.RawMessage(`{"engine":"invalid_engine","query":"test query"}`),
				Output:      json.RawMessage(`{"error":"unsupported search engine: invalid_engine"}`),
			},
			{
				Name:        "Search with bearer token authentication",
				Description: "Search protected custom search endpoint",
				Input:       json.RawMessage(`{"auth_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...","auth_type":"bearer","engine":"custom","query":"internal documents"}`),
				Output:      json.RawMessage(`{"engine":"custom","query":"internal documents","time_ms":452,"total_found":5}`),
			},
			{
				Name:        "Search with API key authentication",
				Description: "Search with API key in custom header",
				Input:       json.RawMessage(`{"auth_api_key":"abc123xyz789","auth_key_name":"X-Custom-API-Key","auth_type":"api_key","engine":"custom","query":"research papers"}`),
				Output:      json.RawMessage(`{"engine":"custom","query":"research papers","time_ms":523,"total_found":12}`),
			},
		},
	},
	"xml_process": {
		Name:            "xml_process",
		Description:     "Process XML data: parse, query with simplified XPath, or convert to JSON",
		Category:        "data",
		Tags:            []string{"data", "xml", "parse", "query", "xpath", "transform"},
		Version:         "1.0.0",
		Package:         "github.com/lexlapax/go-llms/pkg/agent/builtins/tools/data",
		ParameterSchema: json.RawMessage(`{"properties":{"data":{"description":"The XML data to process","type":"string"},"include_attributes":{"description":"Whether to include XML attributes in the result","type":"boolean"},"operation":{"description":"Operation to perform: parse, query, or to_json","enum":["parse","query","to_json"],"type":"string"},"xpath":{"description":"Simplified XPath query for query operation","type":"string"}},"required":["data","operation"],"type":"object"}`),
		OutputSchema:    json.RawMessage(`{"type":"object"}`),
		UsageHint:       "Use this tool to process XML data in various ways:\n\nParse Operation:\n- Validates XML syntax and parses the data\n- Returns a structured representation of the XML\n- Preserves element hierarchy and relationships\n- Optionally includes attributes (controlled by include_attributes)\n\nQuery Operation (Simplified XPath):\n- Extract specific elements using path expressions\n- Supports basic XPath-like syntax:\n  - /: Path separator\n  - element: Select elements by name\n  - *: Select all child elements\n  - @attribute: Select attribute values\n  - element/child: Navigate hierarchy\n- Returns matching elements or attribute values\n\nConvert to JSON:\n- Transforms XML structure to JSON format\n- Preserves element names, attributes, and text content\n- Useful for working with XML data in JSON-based systems\n\nXML Structure Representation:\n- _name: Element name\n- _attributes: Element attributes (if include_attributes is true)\n- _text: Text content (for leaf elements)\n- Child elements are added as properties\n\nNamespace Support:\n- Basic namespace handling (local names are used)\n- For complex namespace scenarios, consider parsing and processing manually\n\nState Integration:\n- xml_include_attributes_default: Default value for include_attributes option",
		Examples: []Example{
			{
				Name:        "Parse simple XML",
				Description: "Parse a basic XML document with attributes",
				Input:       json.RawMessage(`{"data":"\u003cbook id=\"123\"\u003e\n  \u003ctitle\u003eGo Programming\u003c/title\u003e\n  \u003cauthor\u003eJohn Doe\u003c/author\u003e\n  \u003cyear\u003e2024\u003c/year\u003e\n\u003c/book\u003e","include_attributes":true,"operation":"parse"}`),
				Output:      json.RawMessage(`{"result":{"_attributes":{"id":"123"},"_name":"book","author":{"_name":"author","_text":"John Doe"},"title":{"_name":"title","_text":"Go Programming"},"year":{"_name":"year","_text":"2024"}},"root_element":"book"}`),
			},
			{
				Name:        "Query specific element",
				Description: "Extract book title using XPath-like query",
				Input:       json.RawMessage(`{"data":"\u003ccatalog\u003e\n  \u003cbook\u003e\n    \u003ctitle\u003eXML Processing\u003c/title\u003e\n    \u003cprice\u003e29.99\u003c/price\u003e\n  \u003c/book\u003e\n  \u003cbook\u003e\n    \u003ctitle\u003eData Formats\u003c/title\u003e\n    \u003cprice\u003e34.99\u003c/price\u003e\n  \u003c/book\u003e\n\u003c/catalog\u003e","operation":"query","xpath":"book/title"}`),
				Output:      json.RawMessage(`{"result":[{"_name":"title","_text":"XML Processing"},{"_name":"title","_text":"Data Formats"}],"root_element":"catalog"}`),
			},
			{
				Name:        "Query attribute value",
				Description: "Extract attribute values using @ notation",
				Input:       json.RawMessage(`{"data":"\u003cusers\u003e\n  \u003cuser id=\"u1\" role=\"admin\"\u003eAlice\u003c/user\u003e\n  \u003cuser id=\"u2\" role=\"user\"\u003eBob\u003c/user\u003e\n\u003c/users\u003e","operation":"query","xpath":"user/@id"}`),
				Output:      json.RawMessage(`{"result":["u1","u2"],"root_element":"users"}`),
			},
			{
				Name:        "Convert XML to JSON",
				Description: "Transform XML data into JSON format",
				Input:       json.RawMessage(`{"data":"\u003cperson\u003e\n  \u003cname\u003eJane Smith\u003c/name\u003e\n  \u003cemail\u003ejane@example.com\u003c/email\u003e\n  \u003cskills\u003e\n    \u003cskill\u003ePython\u003c/skill\u003e\n    \u003cskill\u003eXML\u003c/skill\u003e\n    \u003cskill\u003eJSON\u003c/skill\u003e\n  \u003c/skills\u003e\n\u003c/person\u003e","include_attributes":false,"operation":"to_json"}`),
				Output:      json.RawMessage(`{"result":"{\n  \"_name\": \"person\",\n  \"name\": {\n    \"_name\": \"name\",\n    \"_text\": \"Jane Smith\"\n  },\n  \"email\": {\n    \"_name\": \"email\",\n    \"_text\": \"jane@example.com\"\n  },\n  \"skills\": {\n    \"_name\": \"skills\",\n    \"skill\": [\n      {\n        \"_name\": \"skill\",\n        \"_text\": \"Python\"\n      },\n      {\n        \"_name\": \"skill\",\n        \"_text\": \"XML\"\n      },\n      {\n        \"_name\": \"skill\",\n        \"_text\": \"JSON\"\n      }\n    ]\n  }\n}","root_element":"person"}`),
			},
			{
				Name:        "Handle namespaced XML",
				Description: "Parse XML with namespace declarations",
				Input:       json.RawMessage(`{"data":"\u003cns:root xmlns:ns=\"http://example.com/ns\"\u003e\n  \u003cns:item\u003eNamespaced content\u003c/ns:item\u003e\n\u003c/ns:root\u003e","operation":"parse"}`),
				Output:      json.RawMessage(`{"result":{"_name":"root","item":{"_name":"item","_text":"Namespaced content"}},"root_element":"root"}`),
			},
			{
				Name:        "Query all children with wildcard",
				Description: "Use * to select all child elements",
				Input:       json.RawMessage(`{"data":"\u003cconfig\u003e\n  \u003cdatabase\u003eMySQL\u003c/database\u003e\n  \u003ccache\u003eRedis\u003c/cache\u003e\n  \u003cqueue\u003eRabbitMQ\u003c/queue\u003e\n\u003c/config\u003e","operation":"query","xpath":"*"}`),
				Output:      json.RawMessage(`{"result":[{"_name":"database","_text":"MySQL"},{"_name":"cache","_text":"Redis"},{"_name":"queue","_text":"RabbitMQ"}],"root_element":"config"}`),
			},
			{
				Name:        "Handle invalid XML gracefully",
				Description: "Error handling for malformed XML",
				Input:       json.RawMessage(`{"data":"\u003croot\u003e\u003cunclosed\u003e","operation":"parse"}`),
				Output:      json.RawMessage(`{"error":"invalid XML: XML syntax error on line 1: unexpected EOF"}`),
			},
		},
	},
}

// toolFactories maps tool names to their factory functions
var toolFactories = map[string]ToolFactory{
	"api_client":               createApiClientFactory(),
	"calculator":               createCalculatorFactory(),
	"csv_process":              createCsvProcessFactory(),
	"data_transform":           createDataTransformFactory(),
	"datetime_calculate":       createDatetimeCalculateFactory(),
	"datetime_compare":         createDatetimeCompareFactory(),
	"datetime_convert":         createDatetimeConvertFactory(),
	"datetime_format":          createDatetimeFormatFactory(),
	"datetime_info":            createDatetimeInfoFactory(),
	"datetime_now":             createDatetimeNowFactory(),
	"datetime_parse":           createDatetimeParseFactory(),
	"execute_command":          createExecuteCommandFactory(),
	"feed_aggregate":           createFeedAggregateFactory(),
	"feed_convert":             createFeedConvertFactory(),
	"feed_discover":            createFeedDiscoverFactory(),
	"feed_extract":             createFeedExtractFactory(),
	"feed_fetch":               createFeedFetchFactory(),
	"feed_filter":              createFeedFilterFactory(),
	"file_delete":              createFileDeleteFactory(),
	"file_list":                createFileListFactory(),
	"file_move":                createFileMoveFactory(),
	"file_read":                createFileReadFactory(),
	"file_search":              createFileSearchFactory(),
	"file_write":               createFileWriteFactory(),
	"get_environment_variable": createGetEnvironmentVariableFactory(),
	"get_system_info":          createGetSystemInfoFactory(),
	"http_request":             createHttpRequestFactory(),
	"json_process":             createJsonProcessFactory(),
	"process_list":             createProcessListFactory(),
	"web_fetch":                createWebFetchFactory(),
	"web_scrape":               createWebScrapeFactory(),
	"web_search":               createWebSearchFactory(),
	"xml_process":              createXmlProcessFactory(),
}

// Factory creator functions

func createApiClientFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool api_client not yet loaded - import the tool package to use it")
	}
}

func createCalculatorFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool calculator not yet loaded - import the tool package to use it")
	}
}

func createCsvProcessFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool csv_process not yet loaded - import the tool package to use it")
	}
}

func createDataTransformFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool data_transform not yet loaded - import the tool package to use it")
	}
}

func createDatetimeCalculateFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool datetime_calculate not yet loaded - import the tool package to use it")
	}
}

func createDatetimeCompareFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool datetime_compare not yet loaded - import the tool package to use it")
	}
}

func createDatetimeConvertFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool datetime_convert not yet loaded - import the tool package to use it")
	}
}

func createDatetimeFormatFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool datetime_format not yet loaded - import the tool package to use it")
	}
}

func createDatetimeInfoFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool datetime_info not yet loaded - import the tool package to use it")
	}
}

func createDatetimeNowFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool datetime_now not yet loaded - import the tool package to use it")
	}
}

func createDatetimeParseFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool datetime_parse not yet loaded - import the tool package to use it")
	}
}

func createExecuteCommandFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool execute_command not yet loaded - import the tool package to use it")
	}
}

func createFeedAggregateFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool feed_aggregate not yet loaded - import the tool package to use it")
	}
}

func createFeedConvertFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool feed_convert not yet loaded - import the tool package to use it")
	}
}

func createFeedDiscoverFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool feed_discover not yet loaded - import the tool package to use it")
	}
}

func createFeedExtractFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool feed_extract not yet loaded - import the tool package to use it")
	}
}

func createFeedFetchFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool feed_fetch not yet loaded - import the tool package to use it")
	}
}

func createFeedFilterFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool feed_filter not yet loaded - import the tool package to use it")
	}
}

func createFileDeleteFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool file_delete not yet loaded - import the tool package to use it")
	}
}

func createFileListFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool file_list not yet loaded - import the tool package to use it")
	}
}

func createFileMoveFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool file_move not yet loaded - import the tool package to use it")
	}
}

func createFileReadFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool file_read not yet loaded - import the tool package to use it")
	}
}

func createFileSearchFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool file_search not yet loaded - import the tool package to use it")
	}
}

func createFileWriteFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool file_write not yet loaded - import the tool package to use it")
	}
}

func createGetEnvironmentVariableFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool get_environment_variable not yet loaded - import the tool package to use it")
	}
}

func createGetSystemInfoFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool get_system_info not yet loaded - import the tool package to use it")
	}
}

func createHttpRequestFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool http_request not yet loaded - import the tool package to use it")
	}
}

func createJsonProcessFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool json_process not yet loaded - import the tool package to use it")
	}
}

func createProcessListFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool process_list not yet loaded - import the tool package to use it")
	}
}

func createWebFetchFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool web_fetch not yet loaded - import the tool package to use it")
	}
}

func createWebScrapeFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool web_scrape not yet loaded - import the tool package to use it")
	}
}

func createWebSearchFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool web_search not yet loaded - import the tool package to use it")
	}
}

func createXmlProcessFactory() ToolFactory {
	return func() (domain.Tool, error) {
		// Placeholder implementation
		// The actual tool creation will be provided by registry_factories.go
		return nil, fmt.Errorf("tool xml_process not yet loaded - import the tool package to use it")
	}
}

func init() {
	// Register all metadata with the discovery system
	for name, info := range ToolManifest {
		factory := toolFactories[name]
		if err := RegisterToolMetadata(info, factory); err != nil {
			panic(fmt.Sprintf("failed to register tool metadata for %s: %v", name, err))
		}
	}
}
